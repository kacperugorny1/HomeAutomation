
STM32_RS485_Menager.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a04  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002b10  08002b10  00003b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b3c  08002b3c  00004060  2**0
                  CONTENTS
  4 .ARM          00000000  08002b3c  08002b3c  00004060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b3c  08002b3c  00004060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b3c  08002b3c  00003b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b40  08002b40  00003b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08002b44  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000060  08002ba4  00004060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08002ba4  00004270  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000074eb  00000000  00000000  00004089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001689  00000000  00000000  0000b574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b8  00000000  00000000  0000cc00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000051f  00000000  00000000  0000d2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c29  00000000  00000000  0000d7d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008b5f  00000000  00000000  00024400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081d24  00000000  00000000  0002cf5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aec83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001db4  00000000  00000000  000aecc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000b0a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08002af8 	.word	0x08002af8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08002af8 	.word	0x08002af8

0800014c <scanDevices>:
int subdevices_count = 0;
uint8_t* addresses;
uint8_t* temp;
uint8_t* data_to_send;

void scanDevices(bool first){
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  if(first)
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	2b00      	cmp	r3, #0
 800015a:	d007      	beq.n	800016c <scanDevices+0x20>
	  addresses = (uint8_t *)malloc(sizeof(uint8_t) * 254);
 800015c:	20fe      	movs	r0, #254	@ 0xfe
 800015e:	f002 fb3d 	bl	80027dc <malloc>
 8000162:	4603      	mov	r3, r0
 8000164:	461a      	mov	r2, r3
 8000166:	4b35      	ldr	r3, [pc, #212]	@ (800023c <scanDevices+0xf0>)
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	e00c      	b.n	8000186 <scanDevices+0x3a>
  else{
      temp = realloc(addresses, 254 * sizeof(uint8_t));
 800016c:	4b33      	ldr	r3, [pc, #204]	@ (800023c <scanDevices+0xf0>)
 800016e:	681b      	ldr	r3, [r3, #0]
 8000170:	21fe      	movs	r1, #254	@ 0xfe
 8000172:	4618      	mov	r0, r3
 8000174:	f002 fbe8 	bl	8002948 <realloc>
 8000178:	4603      	mov	r3, r0
 800017a:	4a31      	ldr	r2, [pc, #196]	@ (8000240 <scanDevices+0xf4>)
 800017c:	6013      	str	r3, [r2, #0]
      addresses = temp;
 800017e:	4b30      	ldr	r3, [pc, #192]	@ (8000240 <scanDevices+0xf4>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	4a2e      	ldr	r2, [pc, #184]	@ (800023c <scanDevices+0xf0>)
 8000184:	6013      	str	r3, [r2, #0]
  }
  subdevices_count = 0;
 8000186:	4b2f      	ldr	r3, [pc, #188]	@ (8000244 <scanDevices+0xf8>)
 8000188:	2200      	movs	r2, #0
 800018a:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < 253; ++i){
 800018c:	2300      	movs	r3, #0
 800018e:	60fb      	str	r3, [r7, #12]
 8000190:	e032      	b.n	80001f8 <scanDevices+0xac>
	data[0] = 0xFF;
 8000192:	4b2d      	ldr	r3, [pc, #180]	@ (8000248 <scanDevices+0xfc>)
 8000194:	22ff      	movs	r2, #255	@ 0xff
 8000196:	701a      	strb	r2, [r3, #0]
	data[1] = i + 1;
 8000198:	68fb      	ldr	r3, [r7, #12]
 800019a:	b2db      	uxtb	r3, r3
 800019c:	3301      	adds	r3, #1
 800019e:	b2da      	uxtb	r2, r3
 80001a0:	4b29      	ldr	r3, [pc, #164]	@ (8000248 <scanDevices+0xfc>)
 80001a2:	705a      	strb	r2, [r3, #1]
	HAL_UART_Transmit(&huart1, data, data_len, 20);
 80001a4:	2302      	movs	r3, #2
 80001a6:	b29a      	uxth	r2, r3
 80001a8:	2314      	movs	r3, #20
 80001aa:	4927      	ldr	r1, [pc, #156]	@ (8000248 <scanDevices+0xfc>)
 80001ac:	4827      	ldr	r0, [pc, #156]	@ (800024c <scanDevices+0x100>)
 80001ae:	f001 fcaf 	bl	8001b10 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(RS_MODE_GPIO_Port, RS_MODE_Pin, GPIO_PIN_RESET);
 80001b2:	2200      	movs	r2, #0
 80001b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001b8:	4825      	ldr	r0, [pc, #148]	@ (8000250 <scanDevices+0x104>)
 80001ba:	f001 f817 	bl	80011ec <HAL_GPIO_WritePin>
	if(HAL_UART_Receive(&huart1, data, 2, 20) == HAL_OK){
 80001be:	2314      	movs	r3, #20
 80001c0:	2202      	movs	r2, #2
 80001c2:	4921      	ldr	r1, [pc, #132]	@ (8000248 <scanDevices+0xfc>)
 80001c4:	4821      	ldr	r0, [pc, #132]	@ (800024c <scanDevices+0x100>)
 80001c6:	f001 fd26 	bl	8001c16 <HAL_UART_Receive>
 80001ca:	4603      	mov	r3, r0
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d10a      	bne.n	80001e6 <scanDevices+0x9a>
		addresses[subdevices_count++] = data[0];
 80001d0:	4b1a      	ldr	r3, [pc, #104]	@ (800023c <scanDevices+0xf0>)
 80001d2:	681a      	ldr	r2, [r3, #0]
 80001d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000244 <scanDevices+0xf8>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	1c59      	adds	r1, r3, #1
 80001da:	481a      	ldr	r0, [pc, #104]	@ (8000244 <scanDevices+0xf8>)
 80001dc:	6001      	str	r1, [r0, #0]
 80001de:	4413      	add	r3, r2
 80001e0:	4a19      	ldr	r2, [pc, #100]	@ (8000248 <scanDevices+0xfc>)
 80001e2:	7812      	ldrb	r2, [r2, #0]
 80001e4:	701a      	strb	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(RS_MODE_GPIO_Port, RS_MODE_Pin, GPIO_PIN_SET);
 80001e6:	2201      	movs	r2, #1
 80001e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001ec:	4818      	ldr	r0, [pc, #96]	@ (8000250 <scanDevices+0x104>)
 80001ee:	f000 fffd 	bl	80011ec <HAL_GPIO_WritePin>
  for(int i = 0; i < 253; ++i){
 80001f2:	68fb      	ldr	r3, [r7, #12]
 80001f4:	3301      	adds	r3, #1
 80001f6:	60fb      	str	r3, [r7, #12]
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	2bfc      	cmp	r3, #252	@ 0xfc
 80001fc:	ddc9      	ble.n	8000192 <scanDevices+0x46>
  }
  temp = realloc(addresses, subdevices_count * sizeof(uint8_t));
 80001fe:	4b0f      	ldr	r3, [pc, #60]	@ (800023c <scanDevices+0xf0>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	4a10      	ldr	r2, [pc, #64]	@ (8000244 <scanDevices+0xf8>)
 8000204:	6812      	ldr	r2, [r2, #0]
 8000206:	4611      	mov	r1, r2
 8000208:	4618      	mov	r0, r3
 800020a:	f002 fb9d 	bl	8002948 <realloc>
 800020e:	4603      	mov	r3, r0
 8000210:	4a0b      	ldr	r2, [pc, #44]	@ (8000240 <scanDevices+0xf4>)
 8000212:	6013      	str	r3, [r2, #0]
  addresses = temp;
 8000214:	4b0a      	ldr	r3, [pc, #40]	@ (8000240 <scanDevices+0xf4>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a08      	ldr	r2, [pc, #32]	@ (800023c <scanDevices+0xf0>)
 800021a:	6013      	str	r3, [r2, #0]
  data_to_send = (uint8_t *)malloc(sizeof(uint8_t)*((subdevices_count + 1)*2));
 800021c:	4b09      	ldr	r3, [pc, #36]	@ (8000244 <scanDevices+0xf8>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	3301      	adds	r3, #1
 8000222:	005b      	lsls	r3, r3, #1
 8000224:	4618      	mov	r0, r3
 8000226:	f002 fad9 	bl	80027dc <malloc>
 800022a:	4603      	mov	r3, r0
 800022c:	461a      	mov	r2, r3
 800022e:	4b09      	ldr	r3, [pc, #36]	@ (8000254 <scanDevices+0x108>)
 8000230:	601a      	str	r2, [r3, #0]

}
 8000232:	bf00      	nop
 8000234:	3710      	adds	r7, #16
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	20000114 	.word	0x20000114
 8000240:	20000118 	.word	0x20000118
 8000244:	20000110 	.word	0x20000110
 8000248:	2000010c 	.word	0x2000010c
 800024c:	2000007c 	.word	0x2000007c
 8000250:	40010c00 	.word	0x40010c00
 8000254:	2000011c 	.word	0x2000011c

08000258 <addDevice>:

void addDevice(uint8_t device_address) {
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	4603      	mov	r3, r0
 8000260:	71fb      	strb	r3, [r7, #7]
    temp = realloc(addresses, (subdevices_count + 1) * sizeof(uint8_t));
 8000262:	4b18      	ldr	r3, [pc, #96]	@ (80002c4 <addDevice+0x6c>)
 8000264:	681a      	ldr	r2, [r3, #0]
 8000266:	4b18      	ldr	r3, [pc, #96]	@ (80002c8 <addDevice+0x70>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	3301      	adds	r3, #1
 800026c:	4619      	mov	r1, r3
 800026e:	4610      	mov	r0, r2
 8000270:	f002 fb6a 	bl	8002948 <realloc>
 8000274:	4603      	mov	r3, r0
 8000276:	4a15      	ldr	r2, [pc, #84]	@ (80002cc <addDevice+0x74>)
 8000278:	6013      	str	r3, [r2, #0]
    if (temp == NULL) {
 800027a:	4b14      	ldr	r3, [pc, #80]	@ (80002cc <addDevice+0x74>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d01b      	beq.n	80002ba <addDevice+0x62>
        return;
    }

    addresses = temp;
 8000282:	4b12      	ldr	r3, [pc, #72]	@ (80002cc <addDevice+0x74>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a0f      	ldr	r2, [pc, #60]	@ (80002c4 <addDevice+0x6c>)
 8000288:	6013      	str	r3, [r2, #0]

    addresses[subdevices_count] = device_address;
 800028a:	4b0e      	ldr	r3, [pc, #56]	@ (80002c4 <addDevice+0x6c>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4a0e      	ldr	r2, [pc, #56]	@ (80002c8 <addDevice+0x70>)
 8000290:	6812      	ldr	r2, [r2, #0]
 8000292:	4413      	add	r3, r2
 8000294:	79fa      	ldrb	r2, [r7, #7]
 8000296:	701a      	strb	r2, [r3, #0]

    subdevices_count++;
 8000298:	4b0b      	ldr	r3, [pc, #44]	@ (80002c8 <addDevice+0x70>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	3301      	adds	r3, #1
 800029e:	4a0a      	ldr	r2, [pc, #40]	@ (80002c8 <addDevice+0x70>)
 80002a0:	6013      	str	r3, [r2, #0]
    data_to_send = (uint8_t *)malloc(sizeof(uint8_t)*((subdevices_count + 1)*2));
 80002a2:	4b09      	ldr	r3, [pc, #36]	@ (80002c8 <addDevice+0x70>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	3301      	adds	r3, #1
 80002a8:	005b      	lsls	r3, r3, #1
 80002aa:	4618      	mov	r0, r3
 80002ac:	f002 fa96 	bl	80027dc <malloc>
 80002b0:	4603      	mov	r3, r0
 80002b2:	461a      	mov	r2, r3
 80002b4:	4b06      	ldr	r3, [pc, #24]	@ (80002d0 <addDevice+0x78>)
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	e000      	b.n	80002bc <addDevice+0x64>
        return;
 80002ba:	bf00      	nop

}
 80002bc:	3708      	adds	r7, #8
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	20000114 	.word	0x20000114
 80002c8:	20000110 	.word	0x20000110
 80002cc:	20000118 	.word	0x20000118
 80002d0:	2000011c 	.word	0x2000011c

080002d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b086      	sub	sp, #24
 80002d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002da:	f000 fbe1 	bl	8000aa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002de:	f000 f94f 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e2:	f000 f9e7 	bl	80006b4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80002e6:	f000 f9bb 	bl	8000660 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 80002ea:	f000 f98f 	bl	800060c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint32_t tm = 0;
 80002ee:	2300      	movs	r3, #0
 80002f0:	607b      	str	r3, [r7, #4]
  HAL_GPIO_WritePin(RS_MODE_GPIO_Port, RS_MODE_Pin, GPIO_PIN_SET);
 80002f2:	2201      	movs	r2, #1
 80002f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002f8:	4897      	ldr	r0, [pc, #604]	@ (8000558 <main+0x284>)
 80002fa:	f000 ff77 	bl	80011ec <HAL_GPIO_WritePin>

//  Look for devices - scanning the bus
  scanDevices(true);
 80002fe:	2001      	movs	r0, #1
 8000300:	f7ff ff24 	bl	800014c <scanDevices>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(int i = 0; i < 4; ++i){
 8000304:	2300      	movs	r3, #0
 8000306:	617b      	str	r3, [r7, #20]
 8000308:	e015      	b.n	8000336 <main+0x62>
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin<<i, (leds>>i & 0x01));
 800030a:	2208      	movs	r2, #8
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	fa02 f303 	lsl.w	r3, r2, r3
 8000312:	b299      	uxth	r1, r3
 8000314:	4b91      	ldr	r3, [pc, #580]	@ (800055c <main+0x288>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	461a      	mov	r2, r3
 800031a:	697b      	ldr	r3, [r7, #20]
 800031c:	fa42 f303 	asr.w	r3, r2, r3
 8000320:	b2db      	uxtb	r3, r3
 8000322:	f003 0301 	and.w	r3, r3, #1
 8000326:	b2db      	uxtb	r3, r3
 8000328:	461a      	mov	r2, r3
 800032a:	488d      	ldr	r0, [pc, #564]	@ (8000560 <main+0x28c>)
 800032c:	f000 ff5e 	bl	80011ec <HAL_GPIO_WritePin>
	  for(int i = 0; i < 4; ++i){
 8000330:	697b      	ldr	r3, [r7, #20]
 8000332:	3301      	adds	r3, #1
 8000334:	617b      	str	r3, [r7, #20]
 8000336:	697b      	ldr	r3, [r7, #20]
 8000338:	2b03      	cmp	r3, #3
 800033a:	dde6      	ble.n	800030a <main+0x36>
	  }
	  if(HAL_UART_Receive(&huart3,  data, data_len, 20) == HAL_OK)
 800033c:	2302      	movs	r3, #2
 800033e:	b29a      	uxth	r2, r3
 8000340:	2314      	movs	r3, #20
 8000342:	4988      	ldr	r1, [pc, #544]	@ (8000564 <main+0x290>)
 8000344:	4888      	ldr	r0, [pc, #544]	@ (8000568 <main+0x294>)
 8000346:	f001 fc66 	bl	8001c16 <HAL_UART_Receive>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d1d9      	bne.n	8000304 <main+0x30>
	  {
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000350:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000354:	4885      	ldr	r0, [pc, #532]	@ (800056c <main+0x298>)
 8000356:	f000 ff61 	bl	800121c <HAL_GPIO_TogglePin>
		if(data[0] == ADDRESS){
 800035a:	4b82      	ldr	r3, [pc, #520]	@ (8000564 <main+0x290>)
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d107      	bne.n	8000372 <main+0x9e>
			leds = data[1] & 0x0F;
 8000362:	4b80      	ldr	r3, [pc, #512]	@ (8000564 <main+0x290>)
 8000364:	785b      	ldrb	r3, [r3, #1]
 8000366:	f003 030f 	and.w	r3, r3, #15
 800036a:	b2da      	uxtb	r2, r3
 800036c:	4b7b      	ldr	r3, [pc, #492]	@ (800055c <main+0x288>)
 800036e:	701a      	strb	r2, [r3, #0]
 8000370:	e0e5      	b.n	800053e <main+0x26a>
		}
		//get all adresses value
		else if(data[0] == 0xFF && data[1] == 0xFF){
 8000372:	4b7c      	ldr	r3, [pc, #496]	@ (8000564 <main+0x290>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	2bff      	cmp	r3, #255	@ 0xff
 8000378:	d16d      	bne.n	8000456 <main+0x182>
 800037a:	4b7a      	ldr	r3, [pc, #488]	@ (8000564 <main+0x290>)
 800037c:	785b      	ldrb	r3, [r3, #1]
 800037e:	2bff      	cmp	r3, #255	@ 0xff
 8000380:	d169      	bne.n	8000456 <main+0x182>
			data_to_send[0] = 0;
 8000382:	4b7b      	ldr	r3, [pc, #492]	@ (8000570 <main+0x29c>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	2200      	movs	r2, #0
 8000388:	701a      	strb	r2, [r3, #0]
			data_to_send[1] = leds;
 800038a:	4b79      	ldr	r3, [pc, #484]	@ (8000570 <main+0x29c>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	3301      	adds	r3, #1
 8000390:	4a72      	ldr	r2, [pc, #456]	@ (800055c <main+0x288>)
 8000392:	7812      	ldrb	r2, [r2, #0]
 8000394:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < subdevices_count; ++i){
 8000396:	2300      	movs	r3, #0
 8000398:	613b      	str	r3, [r7, #16]
 800039a:	e049      	b.n	8000430 <main+0x15c>
			    data[0] = 0xFF;
 800039c:	4b71      	ldr	r3, [pc, #452]	@ (8000564 <main+0x290>)
 800039e:	22ff      	movs	r2, #255	@ 0xff
 80003a0:	701a      	strb	r2, [r3, #0]
			    data[1] = addresses[i];
 80003a2:	4b74      	ldr	r3, [pc, #464]	@ (8000574 <main+0x2a0>)
 80003a4:	681a      	ldr	r2, [r3, #0]
 80003a6:	693b      	ldr	r3, [r7, #16]
 80003a8:	4413      	add	r3, r2
 80003aa:	781a      	ldrb	r2, [r3, #0]
 80003ac:	4b6d      	ldr	r3, [pc, #436]	@ (8000564 <main+0x290>)
 80003ae:	705a      	strb	r2, [r3, #1]
			    HAL_UART_Transmit(&huart1, data, data_len, 20);
 80003b0:	2302      	movs	r3, #2
 80003b2:	b29a      	uxth	r2, r3
 80003b4:	2314      	movs	r3, #20
 80003b6:	496b      	ldr	r1, [pc, #428]	@ (8000564 <main+0x290>)
 80003b8:	486f      	ldr	r0, [pc, #444]	@ (8000578 <main+0x2a4>)
 80003ba:	f001 fba9 	bl	8001b10 <HAL_UART_Transmit>
			    HAL_GPIO_WritePin(RS_MODE_GPIO_Port, RS_MODE_Pin, GPIO_PIN_RESET);
 80003be:	2200      	movs	r2, #0
 80003c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003c4:	4864      	ldr	r0, [pc, #400]	@ (8000558 <main+0x284>)
 80003c6:	f000 ff11 	bl	80011ec <HAL_GPIO_WritePin>
			    if(HAL_UART_Receive(&huart1, data, 2, 40) == HAL_OK){
 80003ca:	2328      	movs	r3, #40	@ 0x28
 80003cc:	2202      	movs	r2, #2
 80003ce:	4965      	ldr	r1, [pc, #404]	@ (8000564 <main+0x290>)
 80003d0:	4869      	ldr	r0, [pc, #420]	@ (8000578 <main+0x2a4>)
 80003d2:	f001 fc20 	bl	8001c16 <HAL_UART_Receive>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d119      	bne.n	8000410 <main+0x13c>
			      data_to_send[(i + 1) * 2] = data[0];
 80003dc:	4b64      	ldr	r3, [pc, #400]	@ (8000570 <main+0x29c>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	693a      	ldr	r2, [r7, #16]
 80003e2:	3201      	adds	r2, #1
 80003e4:	0052      	lsls	r2, r2, #1
 80003e6:	4413      	add	r3, r2
 80003e8:	4a5e      	ldr	r2, [pc, #376]	@ (8000564 <main+0x290>)
 80003ea:	7812      	ldrb	r2, [r2, #0]
 80003ec:	701a      	strb	r2, [r3, #0]
			      data_to_send[(i + 1) * 2 + 1] = data[1];
 80003ee:	4b60      	ldr	r3, [pc, #384]	@ (8000570 <main+0x29c>)
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	693b      	ldr	r3, [r7, #16]
 80003f4:	3301      	adds	r3, #1
 80003f6:	005b      	lsls	r3, r3, #1
 80003f8:	3301      	adds	r3, #1
 80003fa:	4413      	add	r3, r2
 80003fc:	4a59      	ldr	r2, [pc, #356]	@ (8000564 <main+0x290>)
 80003fe:	7852      	ldrb	r2, [r2, #1]
 8000400:	701a      	strb	r2, [r3, #0]
			      HAL_GPIO_WritePin(RS_MODE_GPIO_Port, RS_MODE_Pin, GPIO_PIN_SET);
 8000402:	2201      	movs	r2, #1
 8000404:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000408:	4853      	ldr	r0, [pc, #332]	@ (8000558 <main+0x284>)
 800040a:	f000 feef 	bl	80011ec <HAL_GPIO_WritePin>
 800040e:	e00c      	b.n	800042a <main+0x156>
			    }
			    else{
			      data_to_send[i + 1] = 0b10101010;
 8000410:	4b57      	ldr	r3, [pc, #348]	@ (8000570 <main+0x29c>)
 8000412:	681a      	ldr	r2, [r3, #0]
 8000414:	693b      	ldr	r3, [r7, #16]
 8000416:	3301      	adds	r3, #1
 8000418:	4413      	add	r3, r2
 800041a:	22aa      	movs	r2, #170	@ 0xaa
 800041c:	701a      	strb	r2, [r3, #0]
			      HAL_GPIO_WritePin(RS_MODE_GPIO_Port, RS_MODE_Pin, GPIO_PIN_SET);
 800041e:	2201      	movs	r2, #1
 8000420:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000424:	484c      	ldr	r0, [pc, #304]	@ (8000558 <main+0x284>)
 8000426:	f000 fee1 	bl	80011ec <HAL_GPIO_WritePin>
			for(int i = 0; i < subdevices_count; ++i){
 800042a:	693b      	ldr	r3, [r7, #16]
 800042c:	3301      	adds	r3, #1
 800042e:	613b      	str	r3, [r7, #16]
 8000430:	4b52      	ldr	r3, [pc, #328]	@ (800057c <main+0x2a8>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	693a      	ldr	r2, [r7, #16]
 8000436:	429a      	cmp	r2, r3
 8000438:	dbb0      	blt.n	800039c <main+0xc8>
			    }
			}
			HAL_UART_Transmit(&huart3, data_to_send, (subdevices_count + 1)*2, HAL_MAX_DELAY);
 800043a:	4b4d      	ldr	r3, [pc, #308]	@ (8000570 <main+0x29c>)
 800043c:	6819      	ldr	r1, [r3, #0]
 800043e:	4b4f      	ldr	r3, [pc, #316]	@ (800057c <main+0x2a8>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	3301      	adds	r3, #1
 8000444:	b29b      	uxth	r3, r3
 8000446:	005b      	lsls	r3, r3, #1
 8000448:	b29a      	uxth	r2, r3
 800044a:	f04f 33ff 	mov.w	r3, #4294967295
 800044e:	4846      	ldr	r0, [pc, #280]	@ (8000568 <main+0x294>)
 8000450:	f001 fb5e 	bl	8001b10 <HAL_UART_Transmit>
 8000454:	e073      	b.n	800053e <main+0x26a>


		}
		//scan adresses
		else if(data[0] == 0xFF && data[1] == 0xFE){
 8000456:	4b43      	ldr	r3, [pc, #268]	@ (8000564 <main+0x290>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2bff      	cmp	r3, #255	@ 0xff
 800045c:	d107      	bne.n	800046e <main+0x19a>
 800045e:	4b41      	ldr	r3, [pc, #260]	@ (8000564 <main+0x290>)
 8000460:	785b      	ldrb	r3, [r3, #1]
 8000462:	2bfe      	cmp	r3, #254	@ 0xfe
 8000464:	d103      	bne.n	800046e <main+0x19a>
			scanDevices(false);
 8000466:	2000      	movs	r0, #0
 8000468:	f7ff fe70 	bl	800014c <scanDevices>
 800046c:	e067      	b.n	800053e <main+0x26a>
		}
		else if(data[0] == 0xFE){
 800046e:	4b3d      	ldr	r3, [pc, #244]	@ (8000564 <main+0x290>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2bfe      	cmp	r3, #254	@ 0xfe
 8000474:	d105      	bne.n	8000482 <main+0x1ae>
		    addDevice(data[1]);
 8000476:	4b3b      	ldr	r3, [pc, #236]	@ (8000564 <main+0x290>)
 8000478:	785b      	ldrb	r3, [r3, #1]
 800047a:	4618      	mov	r0, r3
 800047c:	f7ff feec 	bl	8000258 <addDevice>
 8000480:	e05d      	b.n	800053e <main+0x26a>
		}
		//get one address state
		else if(data[0] == 0xFF){
 8000482:	4b38      	ldr	r3, [pc, #224]	@ (8000564 <main+0x290>)
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	2bff      	cmp	r3, #255	@ 0xff
 8000488:	d151      	bne.n	800052e <main+0x25a>
			int exists = 0;
 800048a:	2300      	movs	r3, #0
 800048c:	60fb      	str	r3, [r7, #12]
			if(data[1] == ADDRESS)
 800048e:	4b35      	ldr	r3, [pc, #212]	@ (8000564 <main+0x290>)
 8000490:	785b      	ldrb	r3, [r3, #1]
 8000492:	2b00      	cmp	r3, #0
 8000494:	d107      	bne.n	80004a6 <main+0x1d2>
				HAL_UART_Transmit(&huart3, &leds, 1, HAL_MAX_DELAY);
 8000496:	f04f 33ff 	mov.w	r3, #4294967295
 800049a:	2201      	movs	r2, #1
 800049c:	492f      	ldr	r1, [pc, #188]	@ (800055c <main+0x288>)
 800049e:	4832      	ldr	r0, [pc, #200]	@ (8000568 <main+0x294>)
 80004a0:	f001 fb36 	bl	8001b10 <HAL_UART_Transmit>
 80004a4:	e04b      	b.n	800053e <main+0x26a>
			else if(data[1] != ADDRESS){
 80004a6:	4b2f      	ldr	r3, [pc, #188]	@ (8000564 <main+0x290>)
 80004a8:	785b      	ldrb	r3, [r3, #1]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d047      	beq.n	800053e <main+0x26a>
				for(int i = 0; i < subdevices_count; ++i)
 80004ae:	2300      	movs	r3, #0
 80004b0:	60bb      	str	r3, [r7, #8]
 80004b2:	e00d      	b.n	80004d0 <main+0x1fc>
					if(data[1] == addresses[i]) exists = 1;
 80004b4:	4b2b      	ldr	r3, [pc, #172]	@ (8000564 <main+0x290>)
 80004b6:	785a      	ldrb	r2, [r3, #1]
 80004b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000574 <main+0x2a0>)
 80004ba:	6819      	ldr	r1, [r3, #0]
 80004bc:	68bb      	ldr	r3, [r7, #8]
 80004be:	440b      	add	r3, r1
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	429a      	cmp	r2, r3
 80004c4:	d101      	bne.n	80004ca <main+0x1f6>
 80004c6:	2301      	movs	r3, #1
 80004c8:	60fb      	str	r3, [r7, #12]
				for(int i = 0; i < subdevices_count; ++i)
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	3301      	adds	r3, #1
 80004ce:	60bb      	str	r3, [r7, #8]
 80004d0:	4b2a      	ldr	r3, [pc, #168]	@ (800057c <main+0x2a8>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	68ba      	ldr	r2, [r7, #8]
 80004d6:	429a      	cmp	r2, r3
 80004d8:	dbec      	blt.n	80004b4 <main+0x1e0>
				if(exists == 1){
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d12e      	bne.n	800053e <main+0x26a>
					HAL_UART_Transmit(&huart1, data, data_len, 20);
 80004e0:	2302      	movs	r3, #2
 80004e2:	b29a      	uxth	r2, r3
 80004e4:	2314      	movs	r3, #20
 80004e6:	491f      	ldr	r1, [pc, #124]	@ (8000564 <main+0x290>)
 80004e8:	4823      	ldr	r0, [pc, #140]	@ (8000578 <main+0x2a4>)
 80004ea:	f001 fb11 	bl	8001b10 <HAL_UART_Transmit>
					HAL_GPIO_WritePin(RS_MODE_GPIO_Port, RS_MODE_Pin, GPIO_PIN_RESET);
 80004ee:	2200      	movs	r2, #0
 80004f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004f4:	4818      	ldr	r0, [pc, #96]	@ (8000558 <main+0x284>)
 80004f6:	f000 fe79 	bl	80011ec <HAL_GPIO_WritePin>
					HAL_UART_Receive(&huart1, data, 2, 40);
 80004fa:	2328      	movs	r3, #40	@ 0x28
 80004fc:	2202      	movs	r2, #2
 80004fe:	4919      	ldr	r1, [pc, #100]	@ (8000564 <main+0x290>)
 8000500:	481d      	ldr	r0, [pc, #116]	@ (8000578 <main+0x2a4>)
 8000502:	f001 fb88 	bl	8001c16 <HAL_UART_Receive>
					data_to_send[0] = data[1];
 8000506:	4b1a      	ldr	r3, [pc, #104]	@ (8000570 <main+0x29c>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a16      	ldr	r2, [pc, #88]	@ (8000564 <main+0x290>)
 800050c:	7852      	ldrb	r2, [r2, #1]
 800050e:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(RS_MODE_GPIO_Port, RS_MODE_Pin, GPIO_PIN_SET);
 8000510:	2201      	movs	r2, #1
 8000512:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000516:	4810      	ldr	r0, [pc, #64]	@ (8000558 <main+0x284>)
 8000518:	f000 fe68 	bl	80011ec <HAL_GPIO_WritePin>
					HAL_UART_Transmit(&huart3, data_to_send, 1, HAL_MAX_DELAY);
 800051c:	4b14      	ldr	r3, [pc, #80]	@ (8000570 <main+0x29c>)
 800051e:	6819      	ldr	r1, [r3, #0]
 8000520:	f04f 33ff 	mov.w	r3, #4294967295
 8000524:	2201      	movs	r2, #1
 8000526:	4810      	ldr	r0, [pc, #64]	@ (8000568 <main+0x294>)
 8000528:	f001 faf2 	bl	8001b10 <HAL_UART_Transmit>
 800052c:	e007      	b.n	800053e <main+0x26a>
				}
			}

		}
		else{
			HAL_UART_Transmit(&huart1, data, data_len, HAL_MAX_DELAY);
 800052e:	2302      	movs	r3, #2
 8000530:	b29a      	uxth	r2, r3
 8000532:	f04f 33ff 	mov.w	r3, #4294967295
 8000536:	490b      	ldr	r1, [pc, #44]	@ (8000564 <main+0x290>)
 8000538:	480f      	ldr	r0, [pc, #60]	@ (8000578 <main+0x2a4>)
 800053a:	f001 fae9 	bl	8001b10 <HAL_UART_Transmit>

		}
		tm = HAL_GetTick();
 800053e:	f000 fb07 	bl	8000b50 <HAL_GetTick>
 8000542:	6078      	str	r0, [r7, #4]
		while(HAL_GetTick() - tm < 200);
 8000544:	bf00      	nop
 8000546:	f000 fb03 	bl	8000b50 <HAL_GetTick>
 800054a:	4602      	mov	r2, r0
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	1ad3      	subs	r3, r2, r3
 8000550:	2bc7      	cmp	r3, #199	@ 0xc7
 8000552:	d9f8      	bls.n	8000546 <main+0x272>
	  for(int i = 0; i < 4; ++i){
 8000554:	e6d6      	b.n	8000304 <main+0x30>
 8000556:	bf00      	nop
 8000558:	40010c00 	.word	0x40010c00
 800055c:	20000000 	.word	0x20000000
 8000560:	40010800 	.word	0x40010800
 8000564:	2000010c 	.word	0x2000010c
 8000568:	200000c4 	.word	0x200000c4
 800056c:	40011000 	.word	0x40011000
 8000570:	2000011c 	.word	0x2000011c
 8000574:	20000114 	.word	0x20000114
 8000578:	2000007c 	.word	0x2000007c
 800057c:	20000110 	.word	0x20000110

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b090      	sub	sp, #64	@ 0x40
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0318 	add.w	r3, r7, #24
 800058a:	2228      	movs	r2, #40	@ 0x28
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f002 fa10 	bl	80029b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a2:	2301      	movs	r3, #1
 80005a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b0:	2301      	movs	r3, #1
 80005b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b4:	2302      	movs	r3, #2
 80005b6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005be:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80005c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c4:	f107 0318 	add.w	r3, r7, #24
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 fe41 	bl	8001250 <HAL_RCC_OscConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005d4:	f000 f8f2 	bl	80007bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d8:	230f      	movs	r3, #15
 80005da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005dc:	2302      	movs	r3, #2
 80005de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	2102      	movs	r1, #2
 80005f2:	4618      	mov	r0, r3
 80005f4:	f001 f8ae 	bl	8001754 <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005fe:	f000 f8dd 	bl	80007bc <Error_Handler>
  }
}
 8000602:	bf00      	nop
 8000604:	3740      	adds	r7, #64	@ 0x40
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000610:	4b11      	ldr	r3, [pc, #68]	@ (8000658 <MX_USART1_UART_Init+0x4c>)
 8000612:	4a12      	ldr	r2, [pc, #72]	@ (800065c <MX_USART1_UART_Init+0x50>)
 8000614:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000616:	4b10      	ldr	r3, [pc, #64]	@ (8000658 <MX_USART1_UART_Init+0x4c>)
 8000618:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800061c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800061e:	4b0e      	ldr	r3, [pc, #56]	@ (8000658 <MX_USART1_UART_Init+0x4c>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000624:	4b0c      	ldr	r3, [pc, #48]	@ (8000658 <MX_USART1_UART_Init+0x4c>)
 8000626:	2200      	movs	r2, #0
 8000628:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800062a:	4b0b      	ldr	r3, [pc, #44]	@ (8000658 <MX_USART1_UART_Init+0x4c>)
 800062c:	2200      	movs	r2, #0
 800062e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000630:	4b09      	ldr	r3, [pc, #36]	@ (8000658 <MX_USART1_UART_Init+0x4c>)
 8000632:	220c      	movs	r2, #12
 8000634:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000636:	4b08      	ldr	r3, [pc, #32]	@ (8000658 <MX_USART1_UART_Init+0x4c>)
 8000638:	2200      	movs	r2, #0
 800063a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800063c:	4b06      	ldr	r3, [pc, #24]	@ (8000658 <MX_USART1_UART_Init+0x4c>)
 800063e:	2200      	movs	r2, #0
 8000640:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000642:	4805      	ldr	r0, [pc, #20]	@ (8000658 <MX_USART1_UART_Init+0x4c>)
 8000644:	f001 fa14 	bl	8001a70 <HAL_UART_Init>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800064e:	f000 f8b5 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	2000007c 	.word	0x2000007c
 800065c:	40013800 	.word	0x40013800

08000660 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000664:	4b11      	ldr	r3, [pc, #68]	@ (80006ac <MX_USART3_UART_Init+0x4c>)
 8000666:	4a12      	ldr	r2, [pc, #72]	@ (80006b0 <MX_USART3_UART_Init+0x50>)
 8000668:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800066a:	4b10      	ldr	r3, [pc, #64]	@ (80006ac <MX_USART3_UART_Init+0x4c>)
 800066c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000670:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000672:	4b0e      	ldr	r3, [pc, #56]	@ (80006ac <MX_USART3_UART_Init+0x4c>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000678:	4b0c      	ldr	r3, [pc, #48]	@ (80006ac <MX_USART3_UART_Init+0x4c>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800067e:	4b0b      	ldr	r3, [pc, #44]	@ (80006ac <MX_USART3_UART_Init+0x4c>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000684:	4b09      	ldr	r3, [pc, #36]	@ (80006ac <MX_USART3_UART_Init+0x4c>)
 8000686:	220c      	movs	r2, #12
 8000688:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068a:	4b08      	ldr	r3, [pc, #32]	@ (80006ac <MX_USART3_UART_Init+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000690:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <MX_USART3_UART_Init+0x4c>)
 8000692:	2200      	movs	r2, #0
 8000694:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000696:	4805      	ldr	r0, [pc, #20]	@ (80006ac <MX_USART3_UART_Init+0x4c>)
 8000698:	f001 f9ea 	bl	8001a70 <HAL_UART_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006a2:	f000 f88b 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	200000c4 	.word	0x200000c4
 80006b0:	40004800 	.word	0x40004800

080006b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b088      	sub	sp, #32
 80006b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ba:	f107 0310 	add.w	r3, r7, #16
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c8:	4b38      	ldr	r3, [pc, #224]	@ (80007ac <MX_GPIO_Init+0xf8>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	4a37      	ldr	r2, [pc, #220]	@ (80007ac <MX_GPIO_Init+0xf8>)
 80006ce:	f043 0310 	orr.w	r3, r3, #16
 80006d2:	6193      	str	r3, [r2, #24]
 80006d4:	4b35      	ldr	r3, [pc, #212]	@ (80007ac <MX_GPIO_Init+0xf8>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	f003 0310 	and.w	r3, r3, #16
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006e0:	4b32      	ldr	r3, [pc, #200]	@ (80007ac <MX_GPIO_Init+0xf8>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	4a31      	ldr	r2, [pc, #196]	@ (80007ac <MX_GPIO_Init+0xf8>)
 80006e6:	f043 0320 	orr.w	r3, r3, #32
 80006ea:	6193      	str	r3, [r2, #24]
 80006ec:	4b2f      	ldr	r3, [pc, #188]	@ (80007ac <MX_GPIO_Init+0xf8>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	f003 0320 	and.w	r3, r3, #32
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f8:	4b2c      	ldr	r3, [pc, #176]	@ (80007ac <MX_GPIO_Init+0xf8>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	4a2b      	ldr	r2, [pc, #172]	@ (80007ac <MX_GPIO_Init+0xf8>)
 80006fe:	f043 0304 	orr.w	r3, r3, #4
 8000702:	6193      	str	r3, [r2, #24]
 8000704:	4b29      	ldr	r3, [pc, #164]	@ (80007ac <MX_GPIO_Init+0xf8>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	f003 0304 	and.w	r3, r3, #4
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000710:	4b26      	ldr	r3, [pc, #152]	@ (80007ac <MX_GPIO_Init+0xf8>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	4a25      	ldr	r2, [pc, #148]	@ (80007ac <MX_GPIO_Init+0xf8>)
 8000716:	f043 0308 	orr.w	r3, r3, #8
 800071a:	6193      	str	r3, [r2, #24]
 800071c:	4b23      	ldr	r3, [pc, #140]	@ (80007ac <MX_GPIO_Init+0xf8>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	f003 0308 	and.w	r3, r3, #8
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800072e:	4820      	ldr	r0, [pc, #128]	@ (80007b0 <MX_GPIO_Init+0xfc>)
 8000730:	f000 fd5c 	bl	80011ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	2178      	movs	r1, #120	@ 0x78
 8000738:	481e      	ldr	r0, [pc, #120]	@ (80007b4 <MX_GPIO_Init+0x100>)
 800073a:	f000 fd57 	bl	80011ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SIGNAL_Pin|RS_MODE_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000744:	481c      	ldr	r0, [pc, #112]	@ (80007b8 <MX_GPIO_Init+0x104>)
 8000746:	f000 fd51 	bl	80011ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800074a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800074e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000750:	2301      	movs	r3, #1
 8000752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000758:	2302      	movs	r3, #2
 800075a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800075c:	f107 0310 	add.w	r3, r7, #16
 8000760:	4619      	mov	r1, r3
 8000762:	4813      	ldr	r0, [pc, #76]	@ (80007b0 <MX_GPIO_Init+0xfc>)
 8000764:	f000 fbbe 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 8000768:	2378      	movs	r3, #120	@ 0x78
 800076a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076c:	2301      	movs	r3, #1
 800076e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000774:	2302      	movs	r3, #2
 8000776:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000778:	f107 0310 	add.w	r3, r7, #16
 800077c:	4619      	mov	r1, r3
 800077e:	480d      	ldr	r0, [pc, #52]	@ (80007b4 <MX_GPIO_Init+0x100>)
 8000780:	f000 fbb0 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIGNAL_Pin RS_MODE_Pin */
  GPIO_InitStruct.Pin = SIGNAL_Pin|RS_MODE_Pin;
 8000784:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000788:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078a:	2301      	movs	r3, #1
 800078c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	2302      	movs	r3, #2
 8000794:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000796:	f107 0310 	add.w	r3, r7, #16
 800079a:	4619      	mov	r1, r3
 800079c:	4806      	ldr	r0, [pc, #24]	@ (80007b8 <MX_GPIO_Init+0x104>)
 800079e:	f000 fba1 	bl	8000ee4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007a2:	bf00      	nop
 80007a4:	3720      	adds	r7, #32
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40021000 	.word	0x40021000
 80007b0:	40011000 	.word	0x40011000
 80007b4:	40010800 	.word	0x40010800
 80007b8:	40010c00 	.word	0x40010c00

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
}
 80007c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <Error_Handler+0x8>

080007c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007ce:	4b15      	ldr	r3, [pc, #84]	@ (8000824 <HAL_MspInit+0x5c>)
 80007d0:	699b      	ldr	r3, [r3, #24]
 80007d2:	4a14      	ldr	r2, [pc, #80]	@ (8000824 <HAL_MspInit+0x5c>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6193      	str	r3, [r2, #24]
 80007da:	4b12      	ldr	r3, [pc, #72]	@ (8000824 <HAL_MspInit+0x5c>)
 80007dc:	699b      	ldr	r3, [r3, #24]
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000824 <HAL_MspInit+0x5c>)
 80007e8:	69db      	ldr	r3, [r3, #28]
 80007ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000824 <HAL_MspInit+0x5c>)
 80007ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007f0:	61d3      	str	r3, [r2, #28]
 80007f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000824 <HAL_MspInit+0x5c>)
 80007f4:	69db      	ldr	r3, [r3, #28]
 80007f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000828 <HAL_MspInit+0x60>)
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	4a04      	ldr	r2, [pc, #16]	@ (8000828 <HAL_MspInit+0x60>)
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081a:	bf00      	nop
 800081c:	3714      	adds	r7, #20
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr
 8000824:	40021000 	.word	0x40021000
 8000828:	40010000 	.word	0x40010000

0800082c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08a      	sub	sp, #40	@ 0x28
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000834:	f107 0318 	add.w	r3, r7, #24
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a40      	ldr	r2, [pc, #256]	@ (8000948 <HAL_UART_MspInit+0x11c>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d13a      	bne.n	80008c2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800084c:	4b3f      	ldr	r3, [pc, #252]	@ (800094c <HAL_UART_MspInit+0x120>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	4a3e      	ldr	r2, [pc, #248]	@ (800094c <HAL_UART_MspInit+0x120>)
 8000852:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000856:	6193      	str	r3, [r2, #24]
 8000858:	4b3c      	ldr	r3, [pc, #240]	@ (800094c <HAL_UART_MspInit+0x120>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000860:	617b      	str	r3, [r7, #20]
 8000862:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000864:	4b39      	ldr	r3, [pc, #228]	@ (800094c <HAL_UART_MspInit+0x120>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	4a38      	ldr	r2, [pc, #224]	@ (800094c <HAL_UART_MspInit+0x120>)
 800086a:	f043 0304 	orr.w	r3, r3, #4
 800086e:	6193      	str	r3, [r2, #24]
 8000870:	4b36      	ldr	r3, [pc, #216]	@ (800094c <HAL_UART_MspInit+0x120>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	f003 0304 	and.w	r3, r3, #4
 8000878:	613b      	str	r3, [r7, #16]
 800087a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800087c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000886:	2303      	movs	r3, #3
 8000888:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088a:	f107 0318 	add.w	r3, r7, #24
 800088e:	4619      	mov	r1, r3
 8000890:	482f      	ldr	r0, [pc, #188]	@ (8000950 <HAL_UART_MspInit+0x124>)
 8000892:	f000 fb27 	bl	8000ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000896:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800089a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089c:	2300      	movs	r3, #0
 800089e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a4:	f107 0318 	add.w	r3, r7, #24
 80008a8:	4619      	mov	r1, r3
 80008aa:	4829      	ldr	r0, [pc, #164]	@ (8000950 <HAL_UART_MspInit+0x124>)
 80008ac:	f000 fb1a 	bl	8000ee4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2100      	movs	r1, #0
 80008b4:	2025      	movs	r0, #37	@ 0x25
 80008b6:	f000 fa2c 	bl	8000d12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008ba:	2025      	movs	r0, #37	@ 0x25
 80008bc:	f000 fa45 	bl	8000d4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80008c0:	e03e      	b.n	8000940 <HAL_UART_MspInit+0x114>
  else if(huart->Instance==USART3)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a23      	ldr	r2, [pc, #140]	@ (8000954 <HAL_UART_MspInit+0x128>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d139      	bne.n	8000940 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART3_CLK_ENABLE();
 80008cc:	4b1f      	ldr	r3, [pc, #124]	@ (800094c <HAL_UART_MspInit+0x120>)
 80008ce:	69db      	ldr	r3, [r3, #28]
 80008d0:	4a1e      	ldr	r2, [pc, #120]	@ (800094c <HAL_UART_MspInit+0x120>)
 80008d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80008d6:	61d3      	str	r3, [r2, #28]
 80008d8:	4b1c      	ldr	r3, [pc, #112]	@ (800094c <HAL_UART_MspInit+0x120>)
 80008da:	69db      	ldr	r3, [r3, #28]
 80008dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e4:	4b19      	ldr	r3, [pc, #100]	@ (800094c <HAL_UART_MspInit+0x120>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	4a18      	ldr	r2, [pc, #96]	@ (800094c <HAL_UART_MspInit+0x120>)
 80008ea:	f043 0308 	orr.w	r3, r3, #8
 80008ee:	6193      	str	r3, [r2, #24]
 80008f0:	4b16      	ldr	r3, [pc, #88]	@ (800094c <HAL_UART_MspInit+0x120>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	f003 0308 	and.w	r3, r3, #8
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000906:	2303      	movs	r3, #3
 8000908:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090a:	f107 0318 	add.w	r3, r7, #24
 800090e:	4619      	mov	r1, r3
 8000910:	4811      	ldr	r0, [pc, #68]	@ (8000958 <HAL_UART_MspInit+0x12c>)
 8000912:	f000 fae7 	bl	8000ee4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000916:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800091a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091c:	2300      	movs	r3, #0
 800091e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000924:	f107 0318 	add.w	r3, r7, #24
 8000928:	4619      	mov	r1, r3
 800092a:	480b      	ldr	r0, [pc, #44]	@ (8000958 <HAL_UART_MspInit+0x12c>)
 800092c:	f000 fada 	bl	8000ee4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000930:	2200      	movs	r2, #0
 8000932:	2100      	movs	r1, #0
 8000934:	2027      	movs	r0, #39	@ 0x27
 8000936:	f000 f9ec 	bl	8000d12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800093a:	2027      	movs	r0, #39	@ 0x27
 800093c:	f000 fa05 	bl	8000d4a <HAL_NVIC_EnableIRQ>
}
 8000940:	bf00      	nop
 8000942:	3728      	adds	r7, #40	@ 0x28
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40013800 	.word	0x40013800
 800094c:	40021000 	.word	0x40021000
 8000950:	40010800 	.word	0x40010800
 8000954:	40004800 	.word	0x40004800
 8000958:	40010c00 	.word	0x40010c00

0800095c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <NMI_Handler+0x4>

08000964 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <HardFault_Handler+0x4>

0800096c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <MemManage_Handler+0x4>

08000974 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <BusFault_Handler+0x4>

0800097c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <UsageFault_Handler+0x4>

08000984 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr

08000990 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr

0800099c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr

080009a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ac:	f000 f8be 	bl	8000b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009b8:	4802      	ldr	r0, [pc, #8]	@ (80009c4 <USART1_IRQHandler+0x10>)
 80009ba:	f001 f9bf 	bl	8001d3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	2000007c 	.word	0x2000007c

080009c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80009cc:	4802      	ldr	r0, [pc, #8]	@ (80009d8 <USART3_IRQHandler+0x10>)
 80009ce:	f001 f9b5 	bl	8001d3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	200000c4 	.word	0x200000c4

080009dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009e4:	4a14      	ldr	r2, [pc, #80]	@ (8000a38 <_sbrk+0x5c>)
 80009e6:	4b15      	ldr	r3, [pc, #84]	@ (8000a3c <_sbrk+0x60>)
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009f0:	4b13      	ldr	r3, [pc, #76]	@ (8000a40 <_sbrk+0x64>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d102      	bne.n	80009fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009f8:	4b11      	ldr	r3, [pc, #68]	@ (8000a40 <_sbrk+0x64>)
 80009fa:	4a12      	ldr	r2, [pc, #72]	@ (8000a44 <_sbrk+0x68>)
 80009fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009fe:	4b10      	ldr	r3, [pc, #64]	@ (8000a40 <_sbrk+0x64>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4413      	add	r3, r2
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d207      	bcs.n	8000a1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a0c:	f001 ffea 	bl	80029e4 <__errno>
 8000a10:	4603      	mov	r3, r0
 8000a12:	220c      	movs	r2, #12
 8000a14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1a:	e009      	b.n	8000a30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a1c:	4b08      	ldr	r3, [pc, #32]	@ (8000a40 <_sbrk+0x64>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a22:	4b07      	ldr	r3, [pc, #28]	@ (8000a40 <_sbrk+0x64>)
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4413      	add	r3, r2
 8000a2a:	4a05      	ldr	r2, [pc, #20]	@ (8000a40 <_sbrk+0x64>)
 8000a2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3718      	adds	r7, #24
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20005000 	.word	0x20005000
 8000a3c:	00000400 	.word	0x00000400
 8000a40:	20000120 	.word	0x20000120
 8000a44:	20000270 	.word	0x20000270

08000a48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr

08000a54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a54:	f7ff fff8 	bl	8000a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a58:	480b      	ldr	r0, [pc, #44]	@ (8000a88 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a5a:	490c      	ldr	r1, [pc, #48]	@ (8000a8c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a5c:	4a0c      	ldr	r2, [pc, #48]	@ (8000a90 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a60:	e002      	b.n	8000a68 <LoopCopyDataInit>

08000a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a66:	3304      	adds	r3, #4

08000a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a6c:	d3f9      	bcc.n	8000a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6e:	4a09      	ldr	r2, [pc, #36]	@ (8000a94 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a70:	4c09      	ldr	r4, [pc, #36]	@ (8000a98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a74:	e001      	b.n	8000a7a <LoopFillZerobss>

08000a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a78:	3204      	adds	r2, #4

08000a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a7c:	d3fb      	bcc.n	8000a76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a7e:	f001 ffb7 	bl	80029f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a82:	f7ff fc27 	bl	80002d4 <main>
  bx lr
 8000a86:	4770      	bx	lr
  ldr r0, =_sdata
 8000a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a8c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000a90:	08002b44 	.word	0x08002b44
  ldr r2, =_sbss
 8000a94:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000a98:	20000270 	.word	0x20000270

08000a9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a9c:	e7fe      	b.n	8000a9c <ADC1_2_IRQHandler>
	...

08000aa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa4:	4b08      	ldr	r3, [pc, #32]	@ (8000ac8 <HAL_Init+0x28>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a07      	ldr	r2, [pc, #28]	@ (8000ac8 <HAL_Init+0x28>)
 8000aaa:	f043 0310 	orr.w	r3, r3, #16
 8000aae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab0:	2003      	movs	r0, #3
 8000ab2:	f000 f923 	bl	8000cfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ab6:	200f      	movs	r0, #15
 8000ab8:	f000 f808 	bl	8000acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000abc:	f7ff fe84 	bl	80007c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac0:	2300      	movs	r3, #0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40022000 	.word	0x40022000

08000acc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ad4:	4b12      	ldr	r3, [pc, #72]	@ (8000b20 <HAL_InitTick+0x54>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	4b12      	ldr	r3, [pc, #72]	@ (8000b24 <HAL_InitTick+0x58>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	4619      	mov	r1, r3
 8000ade:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ae2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 f93b 	bl	8000d66 <HAL_SYSTICK_Config>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	e00e      	b.n	8000b18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2b0f      	cmp	r3, #15
 8000afe:	d80a      	bhi.n	8000b16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b00:	2200      	movs	r2, #0
 8000b02:	6879      	ldr	r1, [r7, #4]
 8000b04:	f04f 30ff 	mov.w	r0, #4294967295
 8000b08:	f000 f903 	bl	8000d12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b0c:	4a06      	ldr	r2, [pc, #24]	@ (8000b28 <HAL_InitTick+0x5c>)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b12:	2300      	movs	r3, #0
 8000b14:	e000      	b.n	8000b18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000004 	.word	0x20000004
 8000b24:	2000000c 	.word	0x2000000c
 8000b28:	20000008 	.word	0x20000008

08000b2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b30:	4b05      	ldr	r3, [pc, #20]	@ (8000b48 <HAL_IncTick+0x1c>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	461a      	mov	r2, r3
 8000b36:	4b05      	ldr	r3, [pc, #20]	@ (8000b4c <HAL_IncTick+0x20>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	4a03      	ldr	r2, [pc, #12]	@ (8000b4c <HAL_IncTick+0x20>)
 8000b3e:	6013      	str	r3, [r2, #0]
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr
 8000b48:	2000000c 	.word	0x2000000c
 8000b4c:	20000124 	.word	0x20000124

08000b50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return uwTick;
 8000b54:	4b02      	ldr	r3, [pc, #8]	@ (8000b60 <HAL_GetTick+0x10>)
 8000b56:	681b      	ldr	r3, [r3, #0]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr
 8000b60:	20000124 	.word	0x20000124

08000b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f003 0307 	and.w	r3, r3, #7
 8000b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b80:	4013      	ands	r3, r2
 8000b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b96:	4a04      	ldr	r2, [pc, #16]	@ (8000ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	60d3      	str	r3, [r2, #12]
}
 8000b9c:	bf00      	nop
 8000b9e:	3714      	adds	r7, #20
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb0:	4b04      	ldr	r3, [pc, #16]	@ (8000bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	0a1b      	lsrs	r3, r3, #8
 8000bb6:	f003 0307 	and.w	r3, r3, #7
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	db0b      	blt.n	8000bf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	f003 021f 	and.w	r2, r3, #31
 8000be0:	4906      	ldr	r1, [pc, #24]	@ (8000bfc <__NVIC_EnableIRQ+0x34>)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	095b      	lsrs	r3, r3, #5
 8000be8:	2001      	movs	r0, #1
 8000bea:	fa00 f202 	lsl.w	r2, r0, r2
 8000bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	e000e100 	.word	0xe000e100

08000c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db0a      	blt.n	8000c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	490c      	ldr	r1, [pc, #48]	@ (8000c4c <__NVIC_SetPriority+0x4c>)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	0112      	lsls	r2, r2, #4
 8000c20:	b2d2      	uxtb	r2, r2
 8000c22:	440b      	add	r3, r1
 8000c24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c28:	e00a      	b.n	8000c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4908      	ldr	r1, [pc, #32]	@ (8000c50 <__NVIC_SetPriority+0x50>)
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	f003 030f 	and.w	r3, r3, #15
 8000c36:	3b04      	subs	r3, #4
 8000c38:	0112      	lsls	r2, r2, #4
 8000c3a:	b2d2      	uxtb	r2, r2
 8000c3c:	440b      	add	r3, r1
 8000c3e:	761a      	strb	r2, [r3, #24]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000e100 	.word	0xe000e100
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b089      	sub	sp, #36	@ 0x24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	f1c3 0307 	rsb	r3, r3, #7
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	bf28      	it	cs
 8000c72:	2304      	movcs	r3, #4
 8000c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	2b06      	cmp	r3, #6
 8000c7c:	d902      	bls.n	8000c84 <NVIC_EncodePriority+0x30>
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3b03      	subs	r3, #3
 8000c82:	e000      	b.n	8000c86 <NVIC_EncodePriority+0x32>
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	f04f 32ff 	mov.w	r2, #4294967295
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43da      	mvns	r2, r3
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	401a      	ands	r2, r3
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca6:	43d9      	mvns	r1, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	4313      	orrs	r3, r2
         );
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3724      	adds	r7, #36	@ 0x24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr

08000cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cc8:	d301      	bcc.n	8000cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00f      	b.n	8000cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cce:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf8 <SysTick_Config+0x40>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd6:	210f      	movs	r1, #15
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cdc:	f7ff ff90 	bl	8000c00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce0:	4b05      	ldr	r3, [pc, #20]	@ (8000cf8 <SysTick_Config+0x40>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce6:	4b04      	ldr	r3, [pc, #16]	@ (8000cf8 <SysTick_Config+0x40>)
 8000ce8:	2207      	movs	r2, #7
 8000cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	e000e010 	.word	0xe000e010

08000cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff ff2d 	bl	8000b64 <__NVIC_SetPriorityGrouping>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b086      	sub	sp, #24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
 8000d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d24:	f7ff ff42 	bl	8000bac <__NVIC_GetPriorityGrouping>
 8000d28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	68b9      	ldr	r1, [r7, #8]
 8000d2e:	6978      	ldr	r0, [r7, #20]
 8000d30:	f7ff ff90 	bl	8000c54 <NVIC_EncodePriority>
 8000d34:	4602      	mov	r2, r0
 8000d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff5f 	bl	8000c00 <__NVIC_SetPriority>
}
 8000d42:	bf00      	nop
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	4603      	mov	r3, r0
 8000d52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff35 	bl	8000bc8 <__NVIC_EnableIRQ>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff ffa2 	bl	8000cb8 <SysTick_Config>
 8000d74:	4603      	mov	r3, r0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	b085      	sub	sp, #20
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d86:	2300      	movs	r3, #0
 8000d88:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d008      	beq.n	8000da8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2204      	movs	r2, #4
 8000d9a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	e020      	b.n	8000dea <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f022 020e 	bic.w	r2, r2, #14
 8000db6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f022 0201 	bic.w	r2, r2, #1
 8000dc6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8000dd6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2201      	movs	r2, #1
 8000ddc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2200      	movs	r2, #0
 8000de4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3714      	adds	r7, #20
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr

08000df4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d005      	beq.n	8000e18 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2204      	movs	r2, #4
 8000e10:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	73fb      	strb	r3, [r7, #15]
 8000e16:	e051      	b.n	8000ebc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f022 020e 	bic.w	r2, r2, #14
 8000e26:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f022 0201 	bic.w	r2, r2, #1
 8000e36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a22      	ldr	r2, [pc, #136]	@ (8000ec8 <HAL_DMA_Abort_IT+0xd4>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d029      	beq.n	8000e96 <HAL_DMA_Abort_IT+0xa2>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a21      	ldr	r2, [pc, #132]	@ (8000ecc <HAL_DMA_Abort_IT+0xd8>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d022      	beq.n	8000e92 <HAL_DMA_Abort_IT+0x9e>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a1f      	ldr	r2, [pc, #124]	@ (8000ed0 <HAL_DMA_Abort_IT+0xdc>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d01a      	beq.n	8000e8c <HAL_DMA_Abort_IT+0x98>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ed4 <HAL_DMA_Abort_IT+0xe0>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d012      	beq.n	8000e86 <HAL_DMA_Abort_IT+0x92>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a1c      	ldr	r2, [pc, #112]	@ (8000ed8 <HAL_DMA_Abort_IT+0xe4>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d00a      	beq.n	8000e80 <HAL_DMA_Abort_IT+0x8c>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a1b      	ldr	r2, [pc, #108]	@ (8000edc <HAL_DMA_Abort_IT+0xe8>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d102      	bne.n	8000e7a <HAL_DMA_Abort_IT+0x86>
 8000e74:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000e78:	e00e      	b.n	8000e98 <HAL_DMA_Abort_IT+0xa4>
 8000e7a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000e7e:	e00b      	b.n	8000e98 <HAL_DMA_Abort_IT+0xa4>
 8000e80:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e84:	e008      	b.n	8000e98 <HAL_DMA_Abort_IT+0xa4>
 8000e86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e8a:	e005      	b.n	8000e98 <HAL_DMA_Abort_IT+0xa4>
 8000e8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e90:	e002      	b.n	8000e98 <HAL_DMA_Abort_IT+0xa4>
 8000e92:	2310      	movs	r3, #16
 8000e94:	e000      	b.n	8000e98 <HAL_DMA_Abort_IT+0xa4>
 8000e96:	2301      	movs	r3, #1
 8000e98:	4a11      	ldr	r2, [pc, #68]	@ (8000ee0 <HAL_DMA_Abort_IT+0xec>)
 8000e9a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d003      	beq.n	8000ebc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	4798      	blx	r3
    } 
  }
  return status;
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40020008 	.word	0x40020008
 8000ecc:	4002001c 	.word	0x4002001c
 8000ed0:	40020030 	.word	0x40020030
 8000ed4:	40020044 	.word	0x40020044
 8000ed8:	40020058 	.word	0x40020058
 8000edc:	4002006c 	.word	0x4002006c
 8000ee0:	40020000 	.word	0x40020000

08000ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b08b      	sub	sp, #44	@ 0x2c
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ef6:	e169      	b.n	80011cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	69fa      	ldr	r2, [r7, #28]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	f040 8158 	bne.w	80011c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	4a9a      	ldr	r2, [pc, #616]	@ (8001184 <HAL_GPIO_Init+0x2a0>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d05e      	beq.n	8000fde <HAL_GPIO_Init+0xfa>
 8000f20:	4a98      	ldr	r2, [pc, #608]	@ (8001184 <HAL_GPIO_Init+0x2a0>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d875      	bhi.n	8001012 <HAL_GPIO_Init+0x12e>
 8000f26:	4a98      	ldr	r2, [pc, #608]	@ (8001188 <HAL_GPIO_Init+0x2a4>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d058      	beq.n	8000fde <HAL_GPIO_Init+0xfa>
 8000f2c:	4a96      	ldr	r2, [pc, #600]	@ (8001188 <HAL_GPIO_Init+0x2a4>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d86f      	bhi.n	8001012 <HAL_GPIO_Init+0x12e>
 8000f32:	4a96      	ldr	r2, [pc, #600]	@ (800118c <HAL_GPIO_Init+0x2a8>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d052      	beq.n	8000fde <HAL_GPIO_Init+0xfa>
 8000f38:	4a94      	ldr	r2, [pc, #592]	@ (800118c <HAL_GPIO_Init+0x2a8>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d869      	bhi.n	8001012 <HAL_GPIO_Init+0x12e>
 8000f3e:	4a94      	ldr	r2, [pc, #592]	@ (8001190 <HAL_GPIO_Init+0x2ac>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d04c      	beq.n	8000fde <HAL_GPIO_Init+0xfa>
 8000f44:	4a92      	ldr	r2, [pc, #584]	@ (8001190 <HAL_GPIO_Init+0x2ac>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d863      	bhi.n	8001012 <HAL_GPIO_Init+0x12e>
 8000f4a:	4a92      	ldr	r2, [pc, #584]	@ (8001194 <HAL_GPIO_Init+0x2b0>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d046      	beq.n	8000fde <HAL_GPIO_Init+0xfa>
 8000f50:	4a90      	ldr	r2, [pc, #576]	@ (8001194 <HAL_GPIO_Init+0x2b0>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d85d      	bhi.n	8001012 <HAL_GPIO_Init+0x12e>
 8000f56:	2b12      	cmp	r3, #18
 8000f58:	d82a      	bhi.n	8000fb0 <HAL_GPIO_Init+0xcc>
 8000f5a:	2b12      	cmp	r3, #18
 8000f5c:	d859      	bhi.n	8001012 <HAL_GPIO_Init+0x12e>
 8000f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8000f64 <HAL_GPIO_Init+0x80>)
 8000f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f64:	08000fdf 	.word	0x08000fdf
 8000f68:	08000fb9 	.word	0x08000fb9
 8000f6c:	08000fcb 	.word	0x08000fcb
 8000f70:	0800100d 	.word	0x0800100d
 8000f74:	08001013 	.word	0x08001013
 8000f78:	08001013 	.word	0x08001013
 8000f7c:	08001013 	.word	0x08001013
 8000f80:	08001013 	.word	0x08001013
 8000f84:	08001013 	.word	0x08001013
 8000f88:	08001013 	.word	0x08001013
 8000f8c:	08001013 	.word	0x08001013
 8000f90:	08001013 	.word	0x08001013
 8000f94:	08001013 	.word	0x08001013
 8000f98:	08001013 	.word	0x08001013
 8000f9c:	08001013 	.word	0x08001013
 8000fa0:	08001013 	.word	0x08001013
 8000fa4:	08001013 	.word	0x08001013
 8000fa8:	08000fc1 	.word	0x08000fc1
 8000fac:	08000fd5 	.word	0x08000fd5
 8000fb0:	4a79      	ldr	r2, [pc, #484]	@ (8001198 <HAL_GPIO_Init+0x2b4>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d013      	beq.n	8000fde <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fb6:	e02c      	b.n	8001012 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	623b      	str	r3, [r7, #32]
          break;
 8000fbe:	e029      	b.n	8001014 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	623b      	str	r3, [r7, #32]
          break;
 8000fc8:	e024      	b.n	8001014 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	3308      	adds	r3, #8
 8000fd0:	623b      	str	r3, [r7, #32]
          break;
 8000fd2:	e01f      	b.n	8001014 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	330c      	adds	r3, #12
 8000fda:	623b      	str	r3, [r7, #32]
          break;
 8000fdc:	e01a      	b.n	8001014 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d102      	bne.n	8000fec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fe6:	2304      	movs	r3, #4
 8000fe8:	623b      	str	r3, [r7, #32]
          break;
 8000fea:	e013      	b.n	8001014 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d105      	bne.n	8001000 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ff4:	2308      	movs	r3, #8
 8000ff6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	69fa      	ldr	r2, [r7, #28]
 8000ffc:	611a      	str	r2, [r3, #16]
          break;
 8000ffe:	e009      	b.n	8001014 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001000:	2308      	movs	r3, #8
 8001002:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	69fa      	ldr	r2, [r7, #28]
 8001008:	615a      	str	r2, [r3, #20]
          break;
 800100a:	e003      	b.n	8001014 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800100c:	2300      	movs	r3, #0
 800100e:	623b      	str	r3, [r7, #32]
          break;
 8001010:	e000      	b.n	8001014 <HAL_GPIO_Init+0x130>
          break;
 8001012:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	2bff      	cmp	r3, #255	@ 0xff
 8001018:	d801      	bhi.n	800101e <HAL_GPIO_Init+0x13a>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	e001      	b.n	8001022 <HAL_GPIO_Init+0x13e>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3304      	adds	r3, #4
 8001022:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	2bff      	cmp	r3, #255	@ 0xff
 8001028:	d802      	bhi.n	8001030 <HAL_GPIO_Init+0x14c>
 800102a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	e002      	b.n	8001036 <HAL_GPIO_Init+0x152>
 8001030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001032:	3b08      	subs	r3, #8
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	210f      	movs	r1, #15
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	fa01 f303 	lsl.w	r3, r1, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	401a      	ands	r2, r3
 8001048:	6a39      	ldr	r1, [r7, #32]
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	fa01 f303 	lsl.w	r3, r1, r3
 8001050:	431a      	orrs	r2, r3
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800105e:	2b00      	cmp	r3, #0
 8001060:	f000 80b1 	beq.w	80011c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001064:	4b4d      	ldr	r3, [pc, #308]	@ (800119c <HAL_GPIO_Init+0x2b8>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	4a4c      	ldr	r2, [pc, #304]	@ (800119c <HAL_GPIO_Init+0x2b8>)
 800106a:	f043 0301 	orr.w	r3, r3, #1
 800106e:	6193      	str	r3, [r2, #24]
 8001070:	4b4a      	ldr	r3, [pc, #296]	@ (800119c <HAL_GPIO_Init+0x2b8>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	f003 0301 	and.w	r3, r3, #1
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800107c:	4a48      	ldr	r2, [pc, #288]	@ (80011a0 <HAL_GPIO_Init+0x2bc>)
 800107e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001080:	089b      	lsrs	r3, r3, #2
 8001082:	3302      	adds	r3, #2
 8001084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001088:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800108a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800108c:	f003 0303 	and.w	r3, r3, #3
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	220f      	movs	r2, #15
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	4013      	ands	r3, r2
 800109e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a40      	ldr	r2, [pc, #256]	@ (80011a4 <HAL_GPIO_Init+0x2c0>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d013      	beq.n	80010d0 <HAL_GPIO_Init+0x1ec>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a3f      	ldr	r2, [pc, #252]	@ (80011a8 <HAL_GPIO_Init+0x2c4>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d00d      	beq.n	80010cc <HAL_GPIO_Init+0x1e8>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a3e      	ldr	r2, [pc, #248]	@ (80011ac <HAL_GPIO_Init+0x2c8>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d007      	beq.n	80010c8 <HAL_GPIO_Init+0x1e4>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a3d      	ldr	r2, [pc, #244]	@ (80011b0 <HAL_GPIO_Init+0x2cc>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d101      	bne.n	80010c4 <HAL_GPIO_Init+0x1e0>
 80010c0:	2303      	movs	r3, #3
 80010c2:	e006      	b.n	80010d2 <HAL_GPIO_Init+0x1ee>
 80010c4:	2304      	movs	r3, #4
 80010c6:	e004      	b.n	80010d2 <HAL_GPIO_Init+0x1ee>
 80010c8:	2302      	movs	r3, #2
 80010ca:	e002      	b.n	80010d2 <HAL_GPIO_Init+0x1ee>
 80010cc:	2301      	movs	r3, #1
 80010ce:	e000      	b.n	80010d2 <HAL_GPIO_Init+0x1ee>
 80010d0:	2300      	movs	r3, #0
 80010d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010d4:	f002 0203 	and.w	r2, r2, #3
 80010d8:	0092      	lsls	r2, r2, #2
 80010da:	4093      	lsls	r3, r2
 80010dc:	68fa      	ldr	r2, [r7, #12]
 80010de:	4313      	orrs	r3, r2
 80010e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010e2:	492f      	ldr	r1, [pc, #188]	@ (80011a0 <HAL_GPIO_Init+0x2bc>)
 80010e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e6:	089b      	lsrs	r3, r3, #2
 80010e8:	3302      	adds	r3, #2
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d006      	beq.n	800110a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010fc:	4b2d      	ldr	r3, [pc, #180]	@ (80011b4 <HAL_GPIO_Init+0x2d0>)
 80010fe:	689a      	ldr	r2, [r3, #8]
 8001100:	492c      	ldr	r1, [pc, #176]	@ (80011b4 <HAL_GPIO_Init+0x2d0>)
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	4313      	orrs	r3, r2
 8001106:	608b      	str	r3, [r1, #8]
 8001108:	e006      	b.n	8001118 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800110a:	4b2a      	ldr	r3, [pc, #168]	@ (80011b4 <HAL_GPIO_Init+0x2d0>)
 800110c:	689a      	ldr	r2, [r3, #8]
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	43db      	mvns	r3, r3
 8001112:	4928      	ldr	r1, [pc, #160]	@ (80011b4 <HAL_GPIO_Init+0x2d0>)
 8001114:	4013      	ands	r3, r2
 8001116:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d006      	beq.n	8001132 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001124:	4b23      	ldr	r3, [pc, #140]	@ (80011b4 <HAL_GPIO_Init+0x2d0>)
 8001126:	68da      	ldr	r2, [r3, #12]
 8001128:	4922      	ldr	r1, [pc, #136]	@ (80011b4 <HAL_GPIO_Init+0x2d0>)
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	4313      	orrs	r3, r2
 800112e:	60cb      	str	r3, [r1, #12]
 8001130:	e006      	b.n	8001140 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001132:	4b20      	ldr	r3, [pc, #128]	@ (80011b4 <HAL_GPIO_Init+0x2d0>)
 8001134:	68da      	ldr	r2, [r3, #12]
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	43db      	mvns	r3, r3
 800113a:	491e      	ldr	r1, [pc, #120]	@ (80011b4 <HAL_GPIO_Init+0x2d0>)
 800113c:	4013      	ands	r3, r2
 800113e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d006      	beq.n	800115a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800114c:	4b19      	ldr	r3, [pc, #100]	@ (80011b4 <HAL_GPIO_Init+0x2d0>)
 800114e:	685a      	ldr	r2, [r3, #4]
 8001150:	4918      	ldr	r1, [pc, #96]	@ (80011b4 <HAL_GPIO_Init+0x2d0>)
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	4313      	orrs	r3, r2
 8001156:	604b      	str	r3, [r1, #4]
 8001158:	e006      	b.n	8001168 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800115a:	4b16      	ldr	r3, [pc, #88]	@ (80011b4 <HAL_GPIO_Init+0x2d0>)
 800115c:	685a      	ldr	r2, [r3, #4]
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	43db      	mvns	r3, r3
 8001162:	4914      	ldr	r1, [pc, #80]	@ (80011b4 <HAL_GPIO_Init+0x2d0>)
 8001164:	4013      	ands	r3, r2
 8001166:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d021      	beq.n	80011b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001174:	4b0f      	ldr	r3, [pc, #60]	@ (80011b4 <HAL_GPIO_Init+0x2d0>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	490e      	ldr	r1, [pc, #56]	@ (80011b4 <HAL_GPIO_Init+0x2d0>)
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	4313      	orrs	r3, r2
 800117e:	600b      	str	r3, [r1, #0]
 8001180:	e021      	b.n	80011c6 <HAL_GPIO_Init+0x2e2>
 8001182:	bf00      	nop
 8001184:	10320000 	.word	0x10320000
 8001188:	10310000 	.word	0x10310000
 800118c:	10220000 	.word	0x10220000
 8001190:	10210000 	.word	0x10210000
 8001194:	10120000 	.word	0x10120000
 8001198:	10110000 	.word	0x10110000
 800119c:	40021000 	.word	0x40021000
 80011a0:	40010000 	.word	0x40010000
 80011a4:	40010800 	.word	0x40010800
 80011a8:	40010c00 	.word	0x40010c00
 80011ac:	40011000 	.word	0x40011000
 80011b0:	40011400 	.word	0x40011400
 80011b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011b8:	4b0b      	ldr	r3, [pc, #44]	@ (80011e8 <HAL_GPIO_Init+0x304>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	43db      	mvns	r3, r3
 80011c0:	4909      	ldr	r1, [pc, #36]	@ (80011e8 <HAL_GPIO_Init+0x304>)
 80011c2:	4013      	ands	r3, r2
 80011c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80011c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c8:	3301      	adds	r3, #1
 80011ca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d2:	fa22 f303 	lsr.w	r3, r2, r3
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f47f ae8e 	bne.w	8000ef8 <HAL_GPIO_Init+0x14>
  }
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	372c      	adds	r7, #44	@ 0x2c
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr
 80011e8:	40010400 	.word	0x40010400

080011ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	807b      	strh	r3, [r7, #2]
 80011f8:	4613      	mov	r3, r2
 80011fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011fc:	787b      	ldrb	r3, [r7, #1]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001202:	887a      	ldrh	r2, [r7, #2]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001208:	e003      	b.n	8001212 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800120a:	887b      	ldrh	r3, [r7, #2]
 800120c:	041a      	lsls	r2, r3, #16
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	611a      	str	r2, [r3, #16]
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr

0800121c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800122e:	887a      	ldrh	r2, [r7, #2]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4013      	ands	r3, r2
 8001234:	041a      	lsls	r2, r3, #16
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	43d9      	mvns	r1, r3
 800123a:	887b      	ldrh	r3, [r7, #2]
 800123c:	400b      	ands	r3, r1
 800123e:	431a      	orrs	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	611a      	str	r2, [r3, #16]
}
 8001244:	bf00      	nop
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr
	...

08001250 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e272      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	2b00      	cmp	r3, #0
 800126c:	f000 8087 	beq.w	800137e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001270:	4b92      	ldr	r3, [pc, #584]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 030c 	and.w	r3, r3, #12
 8001278:	2b04      	cmp	r3, #4
 800127a:	d00c      	beq.n	8001296 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800127c:	4b8f      	ldr	r3, [pc, #572]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 030c 	and.w	r3, r3, #12
 8001284:	2b08      	cmp	r3, #8
 8001286:	d112      	bne.n	80012ae <HAL_RCC_OscConfig+0x5e>
 8001288:	4b8c      	ldr	r3, [pc, #560]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001290:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001294:	d10b      	bne.n	80012ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001296:	4b89      	ldr	r3, [pc, #548]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d06c      	beq.n	800137c <HAL_RCC_OscConfig+0x12c>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d168      	bne.n	800137c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e24c      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012b6:	d106      	bne.n	80012c6 <HAL_RCC_OscConfig+0x76>
 80012b8:	4b80      	ldr	r3, [pc, #512]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a7f      	ldr	r2, [pc, #508]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 80012be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	e02e      	b.n	8001324 <HAL_RCC_OscConfig+0xd4>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d10c      	bne.n	80012e8 <HAL_RCC_OscConfig+0x98>
 80012ce:	4b7b      	ldr	r3, [pc, #492]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a7a      	ldr	r2, [pc, #488]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 80012d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	4b78      	ldr	r3, [pc, #480]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a77      	ldr	r2, [pc, #476]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 80012e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	e01d      	b.n	8001324 <HAL_RCC_OscConfig+0xd4>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012f0:	d10c      	bne.n	800130c <HAL_RCC_OscConfig+0xbc>
 80012f2:	4b72      	ldr	r3, [pc, #456]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a71      	ldr	r2, [pc, #452]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 80012f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	4b6f      	ldr	r3, [pc, #444]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a6e      	ldr	r2, [pc, #440]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001304:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	e00b      	b.n	8001324 <HAL_RCC_OscConfig+0xd4>
 800130c:	4b6b      	ldr	r3, [pc, #428]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a6a      	ldr	r2, [pc, #424]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001312:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001316:	6013      	str	r3, [r2, #0]
 8001318:	4b68      	ldr	r3, [pc, #416]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a67      	ldr	r2, [pc, #412]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 800131e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001322:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d013      	beq.n	8001354 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132c:	f7ff fc10 	bl	8000b50 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001334:	f7ff fc0c 	bl	8000b50 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b64      	cmp	r3, #100	@ 0x64
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e200      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001346:	4b5d      	ldr	r3, [pc, #372]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0f0      	beq.n	8001334 <HAL_RCC_OscConfig+0xe4>
 8001352:	e014      	b.n	800137e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001354:	f7ff fbfc 	bl	8000b50 <HAL_GetTick>
 8001358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800135c:	f7ff fbf8 	bl	8000b50 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b64      	cmp	r3, #100	@ 0x64
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e1ec      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800136e:	4b53      	ldr	r3, [pc, #332]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f0      	bne.n	800135c <HAL_RCC_OscConfig+0x10c>
 800137a:	e000      	b.n	800137e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800137c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d063      	beq.n	8001452 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800138a:	4b4c      	ldr	r3, [pc, #304]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	2b00      	cmp	r3, #0
 8001394:	d00b      	beq.n	80013ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001396:	4b49      	ldr	r3, [pc, #292]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f003 030c 	and.w	r3, r3, #12
 800139e:	2b08      	cmp	r3, #8
 80013a0:	d11c      	bne.n	80013dc <HAL_RCC_OscConfig+0x18c>
 80013a2:	4b46      	ldr	r3, [pc, #280]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d116      	bne.n	80013dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ae:	4b43      	ldr	r3, [pc, #268]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d005      	beq.n	80013c6 <HAL_RCC_OscConfig+0x176>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d001      	beq.n	80013c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e1c0      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c6:	4b3d      	ldr	r3, [pc, #244]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	4939      	ldr	r1, [pc, #228]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013da:	e03a      	b.n	8001452 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d020      	beq.n	8001426 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013e4:	4b36      	ldr	r3, [pc, #216]	@ (80014c0 <HAL_RCC_OscConfig+0x270>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ea:	f7ff fbb1 	bl	8000b50 <HAL_GetTick>
 80013ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f0:	e008      	b.n	8001404 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013f2:	f7ff fbad 	bl	8000b50 <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e1a1      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001404:	4b2d      	ldr	r3, [pc, #180]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d0f0      	beq.n	80013f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001410:	4b2a      	ldr	r3, [pc, #168]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	4927      	ldr	r1, [pc, #156]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001420:	4313      	orrs	r3, r2
 8001422:	600b      	str	r3, [r1, #0]
 8001424:	e015      	b.n	8001452 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001426:	4b26      	ldr	r3, [pc, #152]	@ (80014c0 <HAL_RCC_OscConfig+0x270>)
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142c:	f7ff fb90 	bl	8000b50 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001434:	f7ff fb8c 	bl	8000b50 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e180      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001446:	4b1d      	ldr	r3, [pc, #116]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f0      	bne.n	8001434 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	2b00      	cmp	r3, #0
 800145c:	d03a      	beq.n	80014d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d019      	beq.n	800149a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001466:	4b17      	ldr	r3, [pc, #92]	@ (80014c4 <HAL_RCC_OscConfig+0x274>)
 8001468:	2201      	movs	r2, #1
 800146a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146c:	f7ff fb70 	bl	8000b50 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001474:	f7ff fb6c 	bl	8000b50 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e160      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001486:	4b0d      	ldr	r3, [pc, #52]	@ (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d0f0      	beq.n	8001474 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001492:	2001      	movs	r0, #1
 8001494:	f000 face 	bl	8001a34 <RCC_Delay>
 8001498:	e01c      	b.n	80014d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800149a:	4b0a      	ldr	r3, [pc, #40]	@ (80014c4 <HAL_RCC_OscConfig+0x274>)
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a0:	f7ff fb56 	bl	8000b50 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a6:	e00f      	b.n	80014c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014a8:	f7ff fb52 	bl	8000b50 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d908      	bls.n	80014c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e146      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
 80014ba:	bf00      	nop
 80014bc:	40021000 	.word	0x40021000
 80014c0:	42420000 	.word	0x42420000
 80014c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c8:	4b92      	ldr	r3, [pc, #584]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 80014ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1e9      	bne.n	80014a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 80a6 	beq.w	800162e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014e2:	2300      	movs	r3, #0
 80014e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014e6:	4b8b      	ldr	r3, [pc, #556]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d10d      	bne.n	800150e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014f2:	4b88      	ldr	r3, [pc, #544]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	4a87      	ldr	r2, [pc, #540]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 80014f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014fc:	61d3      	str	r3, [r2, #28]
 80014fe:	4b85      	ldr	r3, [pc, #532]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800150a:	2301      	movs	r3, #1
 800150c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150e:	4b82      	ldr	r3, [pc, #520]	@ (8001718 <HAL_RCC_OscConfig+0x4c8>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001516:	2b00      	cmp	r3, #0
 8001518:	d118      	bne.n	800154c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800151a:	4b7f      	ldr	r3, [pc, #508]	@ (8001718 <HAL_RCC_OscConfig+0x4c8>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a7e      	ldr	r2, [pc, #504]	@ (8001718 <HAL_RCC_OscConfig+0x4c8>)
 8001520:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001524:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001526:	f7ff fb13 	bl	8000b50 <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800152e:	f7ff fb0f 	bl	8000b50 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b64      	cmp	r3, #100	@ 0x64
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e103      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001540:	4b75      	ldr	r3, [pc, #468]	@ (8001718 <HAL_RCC_OscConfig+0x4c8>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0f0      	beq.n	800152e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d106      	bne.n	8001562 <HAL_RCC_OscConfig+0x312>
 8001554:	4b6f      	ldr	r3, [pc, #444]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	4a6e      	ldr	r2, [pc, #440]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	6213      	str	r3, [r2, #32]
 8001560:	e02d      	b.n	80015be <HAL_RCC_OscConfig+0x36e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10c      	bne.n	8001584 <HAL_RCC_OscConfig+0x334>
 800156a:	4b6a      	ldr	r3, [pc, #424]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 800156c:	6a1b      	ldr	r3, [r3, #32]
 800156e:	4a69      	ldr	r2, [pc, #420]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 8001570:	f023 0301 	bic.w	r3, r3, #1
 8001574:	6213      	str	r3, [r2, #32]
 8001576:	4b67      	ldr	r3, [pc, #412]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 8001578:	6a1b      	ldr	r3, [r3, #32]
 800157a:	4a66      	ldr	r2, [pc, #408]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 800157c:	f023 0304 	bic.w	r3, r3, #4
 8001580:	6213      	str	r3, [r2, #32]
 8001582:	e01c      	b.n	80015be <HAL_RCC_OscConfig+0x36e>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	2b05      	cmp	r3, #5
 800158a:	d10c      	bne.n	80015a6 <HAL_RCC_OscConfig+0x356>
 800158c:	4b61      	ldr	r3, [pc, #388]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	4a60      	ldr	r2, [pc, #384]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 8001592:	f043 0304 	orr.w	r3, r3, #4
 8001596:	6213      	str	r3, [r2, #32]
 8001598:	4b5e      	ldr	r3, [pc, #376]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	4a5d      	ldr	r2, [pc, #372]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	6213      	str	r3, [r2, #32]
 80015a4:	e00b      	b.n	80015be <HAL_RCC_OscConfig+0x36e>
 80015a6:	4b5b      	ldr	r3, [pc, #364]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 80015a8:	6a1b      	ldr	r3, [r3, #32]
 80015aa:	4a5a      	ldr	r2, [pc, #360]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 80015ac:	f023 0301 	bic.w	r3, r3, #1
 80015b0:	6213      	str	r3, [r2, #32]
 80015b2:	4b58      	ldr	r3, [pc, #352]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	4a57      	ldr	r2, [pc, #348]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 80015b8:	f023 0304 	bic.w	r3, r3, #4
 80015bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d015      	beq.n	80015f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c6:	f7ff fac3 	bl	8000b50 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015cc:	e00a      	b.n	80015e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ce:	f7ff fabf 	bl	8000b50 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015dc:	4293      	cmp	r3, r2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e0b1      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e4:	4b4b      	ldr	r3, [pc, #300]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0ee      	beq.n	80015ce <HAL_RCC_OscConfig+0x37e>
 80015f0:	e014      	b.n	800161c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f2:	f7ff faad 	bl	8000b50 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015f8:	e00a      	b.n	8001610 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015fa:	f7ff faa9 	bl	8000b50 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001608:	4293      	cmp	r3, r2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e09b      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001610:	4b40      	ldr	r3, [pc, #256]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1ee      	bne.n	80015fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800161c:	7dfb      	ldrb	r3, [r7, #23]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d105      	bne.n	800162e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001622:	4b3c      	ldr	r3, [pc, #240]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	4a3b      	ldr	r2, [pc, #236]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 8001628:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800162c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	2b00      	cmp	r3, #0
 8001634:	f000 8087 	beq.w	8001746 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001638:	4b36      	ldr	r3, [pc, #216]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 030c 	and.w	r3, r3, #12
 8001640:	2b08      	cmp	r3, #8
 8001642:	d061      	beq.n	8001708 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	69db      	ldr	r3, [r3, #28]
 8001648:	2b02      	cmp	r3, #2
 800164a:	d146      	bne.n	80016da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800164c:	4b33      	ldr	r3, [pc, #204]	@ (800171c <HAL_RCC_OscConfig+0x4cc>)
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001652:	f7ff fa7d 	bl	8000b50 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800165a:	f7ff fa79 	bl	8000b50 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e06d      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800166c:	4b29      	ldr	r3, [pc, #164]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f0      	bne.n	800165a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a1b      	ldr	r3, [r3, #32]
 800167c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001680:	d108      	bne.n	8001694 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001682:	4b24      	ldr	r3, [pc, #144]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	4921      	ldr	r1, [pc, #132]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 8001690:	4313      	orrs	r3, r2
 8001692:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001694:	4b1f      	ldr	r3, [pc, #124]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a19      	ldr	r1, [r3, #32]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a4:	430b      	orrs	r3, r1
 80016a6:	491b      	ldr	r1, [pc, #108]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ac:	4b1b      	ldr	r3, [pc, #108]	@ (800171c <HAL_RCC_OscConfig+0x4cc>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b2:	f7ff fa4d 	bl	8000b50 <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ba:	f7ff fa49 	bl	8000b50 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e03d      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016cc:	4b11      	ldr	r3, [pc, #68]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0f0      	beq.n	80016ba <HAL_RCC_OscConfig+0x46a>
 80016d8:	e035      	b.n	8001746 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016da:	4b10      	ldr	r3, [pc, #64]	@ (800171c <HAL_RCC_OscConfig+0x4cc>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e0:	f7ff fa36 	bl	8000b50 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016e8:	f7ff fa32 	bl	8000b50 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e026      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016fa:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <HAL_RCC_OscConfig+0x4c4>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f0      	bne.n	80016e8 <HAL_RCC_OscConfig+0x498>
 8001706:	e01e      	b.n	8001746 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	69db      	ldr	r3, [r3, #28]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d107      	bne.n	8001720 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e019      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
 8001714:	40021000 	.word	0x40021000
 8001718:	40007000 	.word	0x40007000
 800171c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001720:	4b0b      	ldr	r3, [pc, #44]	@ (8001750 <HAL_RCC_OscConfig+0x500>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	429a      	cmp	r2, r3
 8001732:	d106      	bne.n	8001742 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800173e:	429a      	cmp	r2, r3
 8001740:	d001      	beq.n	8001746 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e000      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40021000 	.word	0x40021000

08001754 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d101      	bne.n	8001768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e0d0      	b.n	800190a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001768:	4b6a      	ldr	r3, [pc, #424]	@ (8001914 <HAL_RCC_ClockConfig+0x1c0>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0307 	and.w	r3, r3, #7
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	429a      	cmp	r2, r3
 8001774:	d910      	bls.n	8001798 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001776:	4b67      	ldr	r3, [pc, #412]	@ (8001914 <HAL_RCC_ClockConfig+0x1c0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f023 0207 	bic.w	r2, r3, #7
 800177e:	4965      	ldr	r1, [pc, #404]	@ (8001914 <HAL_RCC_ClockConfig+0x1c0>)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	4313      	orrs	r3, r2
 8001784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001786:	4b63      	ldr	r3, [pc, #396]	@ (8001914 <HAL_RCC_ClockConfig+0x1c0>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	429a      	cmp	r2, r3
 8001792:	d001      	beq.n	8001798 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e0b8      	b.n	800190a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d020      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d005      	beq.n	80017bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017b0:	4b59      	ldr	r3, [pc, #356]	@ (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	4a58      	ldr	r2, [pc, #352]	@ (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 80017b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80017ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0308 	and.w	r3, r3, #8
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d005      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017c8:	4b53      	ldr	r3, [pc, #332]	@ (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	4a52      	ldr	r2, [pc, #328]	@ (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 80017ce:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80017d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017d4:	4b50      	ldr	r3, [pc, #320]	@ (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	494d      	ldr	r1, [pc, #308]	@ (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d040      	beq.n	8001874 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d107      	bne.n	800180a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fa:	4b47      	ldr	r3, [pc, #284]	@ (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d115      	bne.n	8001832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e07f      	b.n	800190a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d107      	bne.n	8001822 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001812:	4b41      	ldr	r3, [pc, #260]	@ (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d109      	bne.n	8001832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e073      	b.n	800190a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001822:	4b3d      	ldr	r3, [pc, #244]	@ (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e06b      	b.n	800190a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001832:	4b39      	ldr	r3, [pc, #228]	@ (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f023 0203 	bic.w	r2, r3, #3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	4936      	ldr	r1, [pc, #216]	@ (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 8001840:	4313      	orrs	r3, r2
 8001842:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001844:	f7ff f984 	bl	8000b50 <HAL_GetTick>
 8001848:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184a:	e00a      	b.n	8001862 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800184c:	f7ff f980 	bl	8000b50 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	f241 3288 	movw	r2, #5000	@ 0x1388
 800185a:	4293      	cmp	r3, r2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e053      	b.n	800190a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001862:	4b2d      	ldr	r3, [pc, #180]	@ (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f003 020c 	and.w	r2, r3, #12
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	429a      	cmp	r2, r3
 8001872:	d1eb      	bne.n	800184c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001874:	4b27      	ldr	r3, [pc, #156]	@ (8001914 <HAL_RCC_ClockConfig+0x1c0>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0307 	and.w	r3, r3, #7
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	429a      	cmp	r2, r3
 8001880:	d210      	bcs.n	80018a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001882:	4b24      	ldr	r3, [pc, #144]	@ (8001914 <HAL_RCC_ClockConfig+0x1c0>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f023 0207 	bic.w	r2, r3, #7
 800188a:	4922      	ldr	r1, [pc, #136]	@ (8001914 <HAL_RCC_ClockConfig+0x1c0>)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	4313      	orrs	r3, r2
 8001890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001892:	4b20      	ldr	r3, [pc, #128]	@ (8001914 <HAL_RCC_ClockConfig+0x1c0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	d001      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e032      	b.n	800190a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d008      	beq.n	80018c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018b0:	4b19      	ldr	r3, [pc, #100]	@ (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	4916      	ldr	r1, [pc, #88]	@ (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0308 	and.w	r3, r3, #8
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d009      	beq.n	80018e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018ce:	4b12      	ldr	r3, [pc, #72]	@ (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	490e      	ldr	r1, [pc, #56]	@ (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018e2:	f000 f821 	bl	8001928 <HAL_RCC_GetSysClockFreq>
 80018e6:	4602      	mov	r2, r0
 80018e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	091b      	lsrs	r3, r3, #4
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	490a      	ldr	r1, [pc, #40]	@ (800191c <HAL_RCC_ClockConfig+0x1c8>)
 80018f4:	5ccb      	ldrb	r3, [r1, r3]
 80018f6:	fa22 f303 	lsr.w	r3, r2, r3
 80018fa:	4a09      	ldr	r2, [pc, #36]	@ (8001920 <HAL_RCC_ClockConfig+0x1cc>)
 80018fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018fe:	4b09      	ldr	r3, [pc, #36]	@ (8001924 <HAL_RCC_ClockConfig+0x1d0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff f8e2 	bl	8000acc <HAL_InitTick>

  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40022000 	.word	0x40022000
 8001918:	40021000 	.word	0x40021000
 800191c:	08002b10 	.word	0x08002b10
 8001920:	20000004 	.word	0x20000004
 8001924:	20000008 	.word	0x20000008

08001928 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001928:	b480      	push	{r7}
 800192a:	b087      	sub	sp, #28
 800192c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	2300      	movs	r3, #0
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	2300      	movs	r3, #0
 800193c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001942:	4b1e      	ldr	r3, [pc, #120]	@ (80019bc <HAL_RCC_GetSysClockFreq+0x94>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f003 030c 	and.w	r3, r3, #12
 800194e:	2b04      	cmp	r3, #4
 8001950:	d002      	beq.n	8001958 <HAL_RCC_GetSysClockFreq+0x30>
 8001952:	2b08      	cmp	r3, #8
 8001954:	d003      	beq.n	800195e <HAL_RCC_GetSysClockFreq+0x36>
 8001956:	e027      	b.n	80019a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001958:	4b19      	ldr	r3, [pc, #100]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800195a:	613b      	str	r3, [r7, #16]
      break;
 800195c:	e027      	b.n	80019ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	0c9b      	lsrs	r3, r3, #18
 8001962:	f003 030f 	and.w	r3, r3, #15
 8001966:	4a17      	ldr	r2, [pc, #92]	@ (80019c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001968:	5cd3      	ldrb	r3, [r2, r3]
 800196a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d010      	beq.n	8001998 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001976:	4b11      	ldr	r3, [pc, #68]	@ (80019bc <HAL_RCC_GetSysClockFreq+0x94>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	0c5b      	lsrs	r3, r3, #17
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	4a11      	ldr	r2, [pc, #68]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001982:	5cd3      	ldrb	r3, [r2, r3]
 8001984:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a0d      	ldr	r2, [pc, #52]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800198a:	fb03 f202 	mul.w	r2, r3, r2
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	fbb2 f3f3 	udiv	r3, r2, r3
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	e004      	b.n	80019a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a0c      	ldr	r2, [pc, #48]	@ (80019cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800199c:	fb02 f303 	mul.w	r3, r2, r3
 80019a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	613b      	str	r3, [r7, #16]
      break;
 80019a6:	e002      	b.n	80019ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019a8:	4b05      	ldr	r3, [pc, #20]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80019aa:	613b      	str	r3, [r7, #16]
      break;
 80019ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019ae:	693b      	ldr	r3, [r7, #16]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	371c      	adds	r7, #28
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40021000 	.word	0x40021000
 80019c0:	007a1200 	.word	0x007a1200
 80019c4:	08002b28 	.word	0x08002b28
 80019c8:	08002b38 	.word	0x08002b38
 80019cc:	003d0900 	.word	0x003d0900

080019d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019d4:	4b02      	ldr	r3, [pc, #8]	@ (80019e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80019d6:	681b      	ldr	r3, [r3, #0]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr
 80019e0:	20000004 	.word	0x20000004

080019e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019e8:	f7ff fff2 	bl	80019d0 <HAL_RCC_GetHCLKFreq>
 80019ec:	4602      	mov	r2, r0
 80019ee:	4b05      	ldr	r3, [pc, #20]	@ (8001a04 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	0a1b      	lsrs	r3, r3, #8
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	4903      	ldr	r1, [pc, #12]	@ (8001a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019fa:	5ccb      	ldrb	r3, [r1, r3]
 80019fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40021000 	.word	0x40021000
 8001a08:	08002b20 	.word	0x08002b20

08001a0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a10:	f7ff ffde 	bl	80019d0 <HAL_RCC_GetHCLKFreq>
 8001a14:	4602      	mov	r2, r0
 8001a16:	4b05      	ldr	r3, [pc, #20]	@ (8001a2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	0adb      	lsrs	r3, r3, #11
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	4903      	ldr	r1, [pc, #12]	@ (8001a30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a22:	5ccb      	ldrb	r3, [r1, r3]
 8001a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	08002b20 	.word	0x08002b20

08001a34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a68 <RCC_Delay+0x34>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a0a      	ldr	r2, [pc, #40]	@ (8001a6c <RCC_Delay+0x38>)
 8001a42:	fba2 2303 	umull	r2, r3, r2, r3
 8001a46:	0a5b      	lsrs	r3, r3, #9
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	fb02 f303 	mul.w	r3, r2, r3
 8001a4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a50:	bf00      	nop
  }
  while (Delay --);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	1e5a      	subs	r2, r3, #1
 8001a56:	60fa      	str	r2, [r7, #12]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1f9      	bne.n	8001a50 <RCC_Delay+0x1c>
}
 8001a5c:	bf00      	nop
 8001a5e:	bf00      	nop
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr
 8001a68:	20000004 	.word	0x20000004
 8001a6c:	10624dd3 	.word	0x10624dd3

08001a70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e042      	b.n	8001b08 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d106      	bne.n	8001a9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7fe fec8 	bl	800082c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2224      	movs	r2, #36	@ 0x24
 8001aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001ab2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 fe03 	bl	80026c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	691a      	ldr	r2, [r3, #16]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001ac8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	695a      	ldr	r2, [r3, #20]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001ad8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001ae8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2220      	movs	r2, #32
 8001af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2220      	movs	r2, #32
 8001afc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08a      	sub	sp, #40	@ 0x28
 8001b14:	af02      	add	r7, sp, #8
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	603b      	str	r3, [r7, #0]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b20      	cmp	r3, #32
 8001b2e:	d16d      	bne.n	8001c0c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d002      	beq.n	8001b3c <HAL_UART_Transmit+0x2c>
 8001b36:	88fb      	ldrh	r3, [r7, #6]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e066      	b.n	8001c0e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2200      	movs	r2, #0
 8001b44:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2221      	movs	r2, #33	@ 0x21
 8001b4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b4e:	f7fe ffff 	bl	8000b50 <HAL_GetTick>
 8001b52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	88fa      	ldrh	r2, [r7, #6]
 8001b58:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	88fa      	ldrh	r2, [r7, #6]
 8001b5e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b68:	d108      	bne.n	8001b7c <HAL_UART_Transmit+0x6c>
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d104      	bne.n	8001b7c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	61bb      	str	r3, [r7, #24]
 8001b7a:	e003      	b.n	8001b84 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001b84:	e02a      	b.n	8001bdc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2180      	movs	r1, #128	@ 0x80
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	f000 fb8b 	bl	80022ac <UART_WaitOnFlagUntilTimeout>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e036      	b.n	8001c0e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10b      	bne.n	8001bbe <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	461a      	mov	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bb4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	3302      	adds	r3, #2
 8001bba:	61bb      	str	r3, [r7, #24]
 8001bbc:	e007      	b.n	8001bce <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	781a      	ldrb	r2, [r3, #0]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1cf      	bne.n	8001b86 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	2200      	movs	r2, #0
 8001bee:	2140      	movs	r1, #64	@ 0x40
 8001bf0:	68f8      	ldr	r0, [r7, #12]
 8001bf2:	f000 fb5b 	bl	80022ac <UART_WaitOnFlagUntilTimeout>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e006      	b.n	8001c0e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2220      	movs	r2, #32
 8001c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	e000      	b.n	8001c0e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001c0c:	2302      	movs	r3, #2
  }
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3720      	adds	r7, #32
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b08a      	sub	sp, #40	@ 0x28
 8001c1a:	af02      	add	r7, sp, #8
 8001c1c:	60f8      	str	r0, [r7, #12]
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	603b      	str	r3, [r7, #0]
 8001c22:	4613      	mov	r3, r2
 8001c24:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b20      	cmp	r3, #32
 8001c34:	d17c      	bne.n	8001d30 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d002      	beq.n	8001c42 <HAL_UART_Receive+0x2c>
 8001c3c:	88fb      	ldrh	r3, [r7, #6]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e075      	b.n	8001d32 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2222      	movs	r2, #34	@ 0x22
 8001c50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c5a:	f7fe ff79 	bl	8000b50 <HAL_GetTick>
 8001c5e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	88fa      	ldrh	r2, [r7, #6]
 8001c64:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	88fa      	ldrh	r2, [r7, #6]
 8001c6a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c74:	d108      	bne.n	8001c88 <HAL_UART_Receive+0x72>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d104      	bne.n	8001c88 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	61bb      	str	r3, [r7, #24]
 8001c86:	e003      	b.n	8001c90 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001c90:	e043      	b.n	8001d1a <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	2120      	movs	r1, #32
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f000 fb05 	bl	80022ac <UART_WaitOnFlagUntilTimeout>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e042      	b.n	8001d32 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10c      	bne.n	8001ccc <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	3302      	adds	r3, #2
 8001cc8:	61bb      	str	r3, [r7, #24]
 8001cca:	e01f      	b.n	8001d0c <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001cd4:	d007      	beq.n	8001ce6 <HAL_UART_Receive+0xd0>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d10a      	bne.n	8001cf4 <HAL_UART_Receive+0xde>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d106      	bne.n	8001cf4 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	701a      	strb	r2, [r3, #0]
 8001cf2:	e008      	b.n	8001d06 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	3b01      	subs	r3, #1
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1b6      	bne.n	8001c92 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2220      	movs	r2, #32
 8001d28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	e000      	b.n	8001d32 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001d30:	2302      	movs	r3, #2
  }
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3720      	adds	r7, #32
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
	...

08001d3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b0ba      	sub	sp, #232	@ 0xe8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001d7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10f      	bne.n	8001da2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d86:	f003 0320 	and.w	r3, r3, #32
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d009      	beq.n	8001da2 <HAL_UART_IRQHandler+0x66>
 8001d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d92:	f003 0320 	and.w	r3, r3, #32
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 fbd1 	bl	8002542 <UART_Receive_IT>
      return;
 8001da0:	e25b      	b.n	800225a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001da2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 80de 	beq.w	8001f68 <HAL_UART_IRQHandler+0x22c>
 8001dac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d106      	bne.n	8001dc6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001dbc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f000 80d1 	beq.w	8001f68 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00b      	beq.n	8001dea <HAL_UART_IRQHandler+0xae>
 8001dd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001dd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d005      	beq.n	8001dea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de2:	f043 0201 	orr.w	r2, r3, #1
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001dee:	f003 0304 	and.w	r3, r3, #4
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00b      	beq.n	8001e0e <HAL_UART_IRQHandler+0xd2>
 8001df6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d005      	beq.n	8001e0e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e06:	f043 0202 	orr.w	r2, r3, #2
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00b      	beq.n	8001e32 <HAL_UART_IRQHandler+0xf6>
 8001e1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d005      	beq.n	8001e32 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2a:	f043 0204 	orr.w	r2, r3, #4
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d011      	beq.n	8001e62 <HAL_UART_IRQHandler+0x126>
 8001e3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e42:	f003 0320 	and.w	r3, r3, #32
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d105      	bne.n	8001e56 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001e4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d005      	beq.n	8001e62 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e5a:	f043 0208 	orr.w	r2, r3, #8
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 81f2 	beq.w	8002250 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e70:	f003 0320 	and.w	r3, r3, #32
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d008      	beq.n	8001e8a <HAL_UART_IRQHandler+0x14e>
 8001e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e7c:	f003 0320 	and.w	r3, r3, #32
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d002      	beq.n	8001e8a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 fb5c 	bl	8002542 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	bf14      	ite	ne
 8001e98:	2301      	movne	r3, #1
 8001e9a:	2300      	moveq	r3, #0
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d103      	bne.n	8001eb6 <HAL_UART_IRQHandler+0x17a>
 8001eae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d04f      	beq.n	8001f56 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 fa66 	bl	8002388 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d041      	beq.n	8001f4e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	3314      	adds	r3, #20
 8001ed0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ed4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001ed8:	e853 3f00 	ldrex	r3, [r3]
 8001edc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001ee0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ee4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001ee8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	3314      	adds	r3, #20
 8001ef2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001ef6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001efa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001efe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001f02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001f06:	e841 2300 	strex	r3, r2, [r1]
 8001f0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001f0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1d9      	bne.n	8001eca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d013      	beq.n	8001f46 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f22:	4a7e      	ldr	r2, [pc, #504]	@ (800211c <HAL_UART_IRQHandler+0x3e0>)
 8001f24:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7fe ff62 	bl	8000df4 <HAL_DMA_Abort_IT>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d016      	beq.n	8001f64 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001f40:	4610      	mov	r0, r2
 8001f42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f44:	e00e      	b.n	8001f64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f99c 	bl	8002284 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f4c:	e00a      	b.n	8001f64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f998 	bl	8002284 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f54:	e006      	b.n	8001f64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f994 	bl	8002284 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8001f62:	e175      	b.n	8002250 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f64:	bf00      	nop
    return;
 8001f66:	e173      	b.n	8002250 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	f040 814f 	bne.w	8002210 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f76:	f003 0310 	and.w	r3, r3, #16
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 8148 	beq.w	8002210 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f84:	f003 0310 	and.w	r3, r3, #16
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 8141 	beq.w	8002210 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	60bb      	str	r3, [r7, #8]
 8001fa2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 80b6 	beq.w	8002120 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001fc0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 8145 	beq.w	8002254 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001fce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	f080 813e 	bcs.w	8002254 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001fde:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	2b20      	cmp	r3, #32
 8001fe8:	f000 8088 	beq.w	80020fc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	330c      	adds	r3, #12
 8001ff2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ff6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ffa:	e853 3f00 	ldrex	r3, [r3]
 8001ffe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002002:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002006:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800200a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	330c      	adds	r3, #12
 8002014:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002018:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800201c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002020:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002024:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002028:	e841 2300 	strex	r3, r2, [r1]
 800202c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002030:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1d9      	bne.n	8001fec <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	3314      	adds	r3, #20
 800203e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002040:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002042:	e853 3f00 	ldrex	r3, [r3]
 8002046:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002048:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800204a:	f023 0301 	bic.w	r3, r3, #1
 800204e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	3314      	adds	r3, #20
 8002058:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800205c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002060:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002062:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002064:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002068:	e841 2300 	strex	r3, r2, [r1]
 800206c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800206e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1e1      	bne.n	8002038 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	3314      	adds	r3, #20
 800207a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800207c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800207e:	e853 3f00 	ldrex	r3, [r3]
 8002082:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002084:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002086:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800208a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	3314      	adds	r3, #20
 8002094:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002098:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800209a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800209c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800209e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80020a0:	e841 2300 	strex	r3, r2, [r1]
 80020a4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80020a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1e3      	bne.n	8002074 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2220      	movs	r2, #32
 80020b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	330c      	adds	r3, #12
 80020c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020c4:	e853 3f00 	ldrex	r3, [r3]
 80020c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80020ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020cc:	f023 0310 	bic.w	r3, r3, #16
 80020d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	330c      	adds	r3, #12
 80020da:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80020de:	65ba      	str	r2, [r7, #88]	@ 0x58
 80020e0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80020e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80020e6:	e841 2300 	strex	r3, r2, [r1]
 80020ea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80020ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1e3      	bne.n	80020ba <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7fe fe41 	bl	8000d7e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2202      	movs	r2, #2
 8002100:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800210a:	b29b      	uxth	r3, r3
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	b29b      	uxth	r3, r3
 8002110:	4619      	mov	r1, r3
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f8bf 	bl	8002296 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002118:	e09c      	b.n	8002254 <HAL_UART_IRQHandler+0x518>
 800211a:	bf00      	nop
 800211c:	0800244d 	.word	0x0800244d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002128:	b29b      	uxth	r3, r3
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002134:	b29b      	uxth	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 808e 	beq.w	8002258 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800213c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002140:	2b00      	cmp	r3, #0
 8002142:	f000 8089 	beq.w	8002258 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	330c      	adds	r3, #12
 800214c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800214e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002150:	e853 3f00 	ldrex	r3, [r3]
 8002154:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002158:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800215c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	330c      	adds	r3, #12
 8002166:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800216a:	647a      	str	r2, [r7, #68]	@ 0x44
 800216c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800216e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002170:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002172:	e841 2300 	strex	r3, r2, [r1]
 8002176:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002178:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1e3      	bne.n	8002146 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	3314      	adds	r3, #20
 8002184:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002188:	e853 3f00 	ldrex	r3, [r3]
 800218c:	623b      	str	r3, [r7, #32]
   return(result);
 800218e:	6a3b      	ldr	r3, [r7, #32]
 8002190:	f023 0301 	bic.w	r3, r3, #1
 8002194:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	3314      	adds	r3, #20
 800219e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80021a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80021a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80021a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021aa:	e841 2300 	strex	r3, r2, [r1]
 80021ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80021b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1e3      	bne.n	800217e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2220      	movs	r2, #32
 80021ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	330c      	adds	r3, #12
 80021ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	e853 3f00 	ldrex	r3, [r3]
 80021d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f023 0310 	bic.w	r3, r3, #16
 80021da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	330c      	adds	r3, #12
 80021e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80021e8:	61fa      	str	r2, [r7, #28]
 80021ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021ec:	69b9      	ldr	r1, [r7, #24]
 80021ee:	69fa      	ldr	r2, [r7, #28]
 80021f0:	e841 2300 	strex	r3, r2, [r1]
 80021f4:	617b      	str	r3, [r7, #20]
   return(result);
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1e3      	bne.n	80021c4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2202      	movs	r2, #2
 8002200:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002202:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002206:	4619      	mov	r1, r3
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 f844 	bl	8002296 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800220e:	e023      	b.n	8002258 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002214:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002218:	2b00      	cmp	r3, #0
 800221a:	d009      	beq.n	8002230 <HAL_UART_IRQHandler+0x4f4>
 800221c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002220:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 f923 	bl	8002474 <UART_Transmit_IT>
    return;
 800222e:	e014      	b.n	800225a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00e      	beq.n	800225a <HAL_UART_IRQHandler+0x51e>
 800223c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002244:	2b00      	cmp	r3, #0
 8002246:	d008      	beq.n	800225a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f962 	bl	8002512 <UART_EndTransmit_IT>
    return;
 800224e:	e004      	b.n	800225a <HAL_UART_IRQHandler+0x51e>
    return;
 8002250:	bf00      	nop
 8002252:	e002      	b.n	800225a <HAL_UART_IRQHandler+0x51e>
      return;
 8002254:	bf00      	nop
 8002256:	e000      	b.n	800225a <HAL_UART_IRQHandler+0x51e>
      return;
 8002258:	bf00      	nop
  }
}
 800225a:	37e8      	adds	r7, #232	@ 0xe8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	bc80      	pop	{r7}
 8002270:	4770      	bx	lr

08002272 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr

08002284 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr

08002296 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
 800229e:	460b      	mov	r3, r1
 80022a0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr

080022ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b090      	sub	sp, #64	@ 0x40
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	603b      	str	r3, [r7, #0]
 80022b8:	4613      	mov	r3, r2
 80022ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022bc:	e050      	b.n	8002360 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c4:	d04c      	beq.n	8002360 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80022c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d007      	beq.n	80022dc <UART_WaitOnFlagUntilTimeout+0x30>
 80022cc:	f7fe fc40 	bl	8000b50 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80022d8:	429a      	cmp	r2, r3
 80022da:	d241      	bcs.n	8002360 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	330c      	adds	r3, #12
 80022e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022e6:	e853 3f00 	ldrex	r3, [r3]
 80022ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80022ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ee:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80022f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	330c      	adds	r3, #12
 80022fa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80022fc:	637a      	str	r2, [r7, #52]	@ 0x34
 80022fe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002300:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002302:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002304:	e841 2300 	strex	r3, r2, [r1]
 8002308:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800230a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1e5      	bne.n	80022dc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	3314      	adds	r3, #20
 8002316:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	e853 3f00 	ldrex	r3, [r3]
 800231e:	613b      	str	r3, [r7, #16]
   return(result);
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	f023 0301 	bic.w	r3, r3, #1
 8002326:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	3314      	adds	r3, #20
 800232e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002330:	623a      	str	r2, [r7, #32]
 8002332:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002334:	69f9      	ldr	r1, [r7, #28]
 8002336:	6a3a      	ldr	r2, [r7, #32]
 8002338:	e841 2300 	strex	r3, r2, [r1]
 800233c:	61bb      	str	r3, [r7, #24]
   return(result);
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1e5      	bne.n	8002310 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2220      	movs	r2, #32
 8002348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2220      	movs	r2, #32
 8002350:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e00f      	b.n	8002380 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	4013      	ands	r3, r2
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	429a      	cmp	r2, r3
 800236e:	bf0c      	ite	eq
 8002370:	2301      	moveq	r3, #1
 8002372:	2300      	movne	r3, #0
 8002374:	b2db      	uxtb	r3, r3
 8002376:	461a      	mov	r2, r3
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	429a      	cmp	r2, r3
 800237c:	d09f      	beq.n	80022be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	3740      	adds	r7, #64	@ 0x40
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002388:	b480      	push	{r7}
 800238a:	b095      	sub	sp, #84	@ 0x54
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	330c      	adds	r3, #12
 8002396:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800239a:	e853 3f00 	ldrex	r3, [r3]
 800239e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80023a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80023a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	330c      	adds	r3, #12
 80023ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80023b0:	643a      	str	r2, [r7, #64]	@ 0x40
 80023b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80023b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80023b8:	e841 2300 	strex	r3, r2, [r1]
 80023bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80023be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1e5      	bne.n	8002390 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	3314      	adds	r3, #20
 80023ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023cc:	6a3b      	ldr	r3, [r7, #32]
 80023ce:	e853 3f00 	ldrex	r3, [r3]
 80023d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f023 0301 	bic.w	r3, r3, #1
 80023da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	3314      	adds	r3, #20
 80023e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80023e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80023ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023ec:	e841 2300 	strex	r3, r2, [r1]
 80023f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80023f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1e5      	bne.n	80023c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d119      	bne.n	8002434 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	330c      	adds	r3, #12
 8002406:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	e853 3f00 	ldrex	r3, [r3]
 800240e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	f023 0310 	bic.w	r3, r3, #16
 8002416:	647b      	str	r3, [r7, #68]	@ 0x44
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	330c      	adds	r3, #12
 800241e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002420:	61ba      	str	r2, [r7, #24]
 8002422:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002424:	6979      	ldr	r1, [r7, #20]
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	e841 2300 	strex	r3, r2, [r1]
 800242c:	613b      	str	r3, [r7, #16]
   return(result);
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1e5      	bne.n	8002400 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2220      	movs	r2, #32
 8002438:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002442:	bf00      	nop
 8002444:	3754      	adds	r7, #84	@ 0x54
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr

0800244c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002458:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f7ff ff0c 	bl	8002284 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800246c:	bf00      	nop
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b21      	cmp	r3, #33	@ 0x21
 8002486:	d13e      	bne.n	8002506 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002490:	d114      	bne.n	80024bc <UART_Transmit_IT+0x48>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d110      	bne.n	80024bc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	461a      	mov	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024ae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	1c9a      	adds	r2, r3, #2
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	621a      	str	r2, [r3, #32]
 80024ba:	e008      	b.n	80024ce <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	1c59      	adds	r1, r3, #1
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	6211      	str	r1, [r2, #32]
 80024c6:	781a      	ldrb	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	3b01      	subs	r3, #1
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	4619      	mov	r1, r3
 80024dc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10f      	bne.n	8002502 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68da      	ldr	r2, [r3, #12]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024f0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68da      	ldr	r2, [r3, #12]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002500:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	e000      	b.n	8002508 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002506:	2302      	movs	r3, #2
  }
}
 8002508:	4618      	mov	r0, r3
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	bc80      	pop	{r7}
 8002510:	4770      	bx	lr

08002512 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68da      	ldr	r2, [r3, #12]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002528:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2220      	movs	r2, #32
 800252e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7ff fe94 	bl	8002260 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b08c      	sub	sp, #48	@ 0x30
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b22      	cmp	r3, #34	@ 0x22
 8002554:	f040 80ae 	bne.w	80026b4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002560:	d117      	bne.n	8002592 <UART_Receive_IT+0x50>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d113      	bne.n	8002592 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800256a:	2300      	movs	r3, #0
 800256c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002572:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	b29b      	uxth	r3, r3
 800257c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002580:	b29a      	uxth	r2, r3
 8002582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002584:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800258a:	1c9a      	adds	r2, r3, #2
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002590:	e026      	b.n	80025e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002596:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002598:	2300      	movs	r3, #0
 800259a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025a4:	d007      	beq.n	80025b6 <UART_Receive_IT+0x74>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10a      	bne.n	80025c4 <UART_Receive_IT+0x82>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d106      	bne.n	80025c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025c0:	701a      	strb	r2, [r3, #0]
 80025c2:	e008      	b.n	80025d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025da:	1c5a      	adds	r2, r3, #1
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	3b01      	subs	r3, #1
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	4619      	mov	r1, r3
 80025ee:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d15d      	bne.n	80026b0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0220 	bic.w	r2, r2, #32
 8002602:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68da      	ldr	r2, [r3, #12]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002612:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	695a      	ldr	r2, [r3, #20]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0201 	bic.w	r2, r2, #1
 8002622:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2220      	movs	r2, #32
 8002628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002636:	2b01      	cmp	r3, #1
 8002638:	d135      	bne.n	80026a6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	330c      	adds	r3, #12
 8002646:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	e853 3f00 	ldrex	r3, [r3]
 800264e:	613b      	str	r3, [r7, #16]
   return(result);
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	f023 0310 	bic.w	r3, r3, #16
 8002656:	627b      	str	r3, [r7, #36]	@ 0x24
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	330c      	adds	r3, #12
 800265e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002660:	623a      	str	r2, [r7, #32]
 8002662:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002664:	69f9      	ldr	r1, [r7, #28]
 8002666:	6a3a      	ldr	r2, [r7, #32]
 8002668:	e841 2300 	strex	r3, r2, [r1]
 800266c:	61bb      	str	r3, [r7, #24]
   return(result);
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1e5      	bne.n	8002640 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0310 	and.w	r3, r3, #16
 800267e:	2b10      	cmp	r3, #16
 8002680:	d10a      	bne.n	8002698 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002682:	2300      	movs	r3, #0
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800269c:	4619      	mov	r1, r3
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7ff fdf9 	bl	8002296 <HAL_UARTEx_RxEventCallback>
 80026a4:	e002      	b.n	80026ac <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7ff fde3 	bl	8002272 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80026ac:	2300      	movs	r3, #0
 80026ae:	e002      	b.n	80026b6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80026b0:	2300      	movs	r3, #0
 80026b2:	e000      	b.n	80026b6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80026b4:	2302      	movs	r3, #2
  }
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3730      	adds	r7, #48	@ 0x30
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80026fa:	f023 030c 	bic.w	r3, r3, #12
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	6812      	ldr	r2, [r2, #0]
 8002702:	68b9      	ldr	r1, [r7, #8]
 8002704:	430b      	orrs	r3, r1
 8002706:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	699a      	ldr	r2, [r3, #24]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a2c      	ldr	r2, [pc, #176]	@ (80027d4 <UART_SetConfig+0x114>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d103      	bne.n	8002730 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002728:	f7ff f970 	bl	8001a0c <HAL_RCC_GetPCLK2Freq>
 800272c:	60f8      	str	r0, [r7, #12]
 800272e:	e002      	b.n	8002736 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002730:	f7ff f958 	bl	80019e4 <HAL_RCC_GetPCLK1Freq>
 8002734:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	4613      	mov	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	009a      	lsls	r2, r3, #2
 8002740:	441a      	add	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	fbb2 f3f3 	udiv	r3, r2, r3
 800274c:	4a22      	ldr	r2, [pc, #136]	@ (80027d8 <UART_SetConfig+0x118>)
 800274e:	fba2 2303 	umull	r2, r3, r2, r3
 8002752:	095b      	lsrs	r3, r3, #5
 8002754:	0119      	lsls	r1, r3, #4
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	4613      	mov	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	009a      	lsls	r2, r3, #2
 8002760:	441a      	add	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	fbb2 f2f3 	udiv	r2, r2, r3
 800276c:	4b1a      	ldr	r3, [pc, #104]	@ (80027d8 <UART_SetConfig+0x118>)
 800276e:	fba3 0302 	umull	r0, r3, r3, r2
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	2064      	movs	r0, #100	@ 0x64
 8002776:	fb00 f303 	mul.w	r3, r0, r3
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	3332      	adds	r3, #50	@ 0x32
 8002780:	4a15      	ldr	r2, [pc, #84]	@ (80027d8 <UART_SetConfig+0x118>)
 8002782:	fba2 2303 	umull	r2, r3, r2, r3
 8002786:	095b      	lsrs	r3, r3, #5
 8002788:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800278c:	4419      	add	r1, r3
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	4613      	mov	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4413      	add	r3, r2
 8002796:	009a      	lsls	r2, r3, #2
 8002798:	441a      	add	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80027a4:	4b0c      	ldr	r3, [pc, #48]	@ (80027d8 <UART_SetConfig+0x118>)
 80027a6:	fba3 0302 	umull	r0, r3, r3, r2
 80027aa:	095b      	lsrs	r3, r3, #5
 80027ac:	2064      	movs	r0, #100	@ 0x64
 80027ae:	fb00 f303 	mul.w	r3, r0, r3
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	011b      	lsls	r3, r3, #4
 80027b6:	3332      	adds	r3, #50	@ 0x32
 80027b8:	4a07      	ldr	r2, [pc, #28]	@ (80027d8 <UART_SetConfig+0x118>)
 80027ba:	fba2 2303 	umull	r2, r3, r2, r3
 80027be:	095b      	lsrs	r3, r3, #5
 80027c0:	f003 020f 	and.w	r2, r3, #15
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	440a      	add	r2, r1
 80027ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80027cc:	bf00      	nop
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40013800 	.word	0x40013800
 80027d8:	51eb851f 	.word	0x51eb851f

080027dc <malloc>:
 80027dc:	4b02      	ldr	r3, [pc, #8]	@ (80027e8 <malloc+0xc>)
 80027de:	4601      	mov	r1, r0
 80027e0:	6818      	ldr	r0, [r3, #0]
 80027e2:	f000 b825 	b.w	8002830 <_malloc_r>
 80027e6:	bf00      	nop
 80027e8:	20000010 	.word	0x20000010

080027ec <sbrk_aligned>:
 80027ec:	b570      	push	{r4, r5, r6, lr}
 80027ee:	4e0f      	ldr	r6, [pc, #60]	@ (800282c <sbrk_aligned+0x40>)
 80027f0:	460c      	mov	r4, r1
 80027f2:	6831      	ldr	r1, [r6, #0]
 80027f4:	4605      	mov	r5, r0
 80027f6:	b911      	cbnz	r1, 80027fe <sbrk_aligned+0x12>
 80027f8:	f000 f8e4 	bl	80029c4 <_sbrk_r>
 80027fc:	6030      	str	r0, [r6, #0]
 80027fe:	4621      	mov	r1, r4
 8002800:	4628      	mov	r0, r5
 8002802:	f000 f8df 	bl	80029c4 <_sbrk_r>
 8002806:	1c43      	adds	r3, r0, #1
 8002808:	d103      	bne.n	8002812 <sbrk_aligned+0x26>
 800280a:	f04f 34ff 	mov.w	r4, #4294967295
 800280e:	4620      	mov	r0, r4
 8002810:	bd70      	pop	{r4, r5, r6, pc}
 8002812:	1cc4      	adds	r4, r0, #3
 8002814:	f024 0403 	bic.w	r4, r4, #3
 8002818:	42a0      	cmp	r0, r4
 800281a:	d0f8      	beq.n	800280e <sbrk_aligned+0x22>
 800281c:	1a21      	subs	r1, r4, r0
 800281e:	4628      	mov	r0, r5
 8002820:	f000 f8d0 	bl	80029c4 <_sbrk_r>
 8002824:	3001      	adds	r0, #1
 8002826:	d1f2      	bne.n	800280e <sbrk_aligned+0x22>
 8002828:	e7ef      	b.n	800280a <sbrk_aligned+0x1e>
 800282a:	bf00      	nop
 800282c:	20000128 	.word	0x20000128

08002830 <_malloc_r>:
 8002830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002834:	1ccd      	adds	r5, r1, #3
 8002836:	f025 0503 	bic.w	r5, r5, #3
 800283a:	3508      	adds	r5, #8
 800283c:	2d0c      	cmp	r5, #12
 800283e:	bf38      	it	cc
 8002840:	250c      	movcc	r5, #12
 8002842:	2d00      	cmp	r5, #0
 8002844:	4606      	mov	r6, r0
 8002846:	db01      	blt.n	800284c <_malloc_r+0x1c>
 8002848:	42a9      	cmp	r1, r5
 800284a:	d904      	bls.n	8002856 <_malloc_r+0x26>
 800284c:	230c      	movs	r3, #12
 800284e:	6033      	str	r3, [r6, #0]
 8002850:	2000      	movs	r0, #0
 8002852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002856:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800292c <_malloc_r+0xfc>
 800285a:	f000 f869 	bl	8002930 <__malloc_lock>
 800285e:	f8d8 3000 	ldr.w	r3, [r8]
 8002862:	461c      	mov	r4, r3
 8002864:	bb44      	cbnz	r4, 80028b8 <_malloc_r+0x88>
 8002866:	4629      	mov	r1, r5
 8002868:	4630      	mov	r0, r6
 800286a:	f7ff ffbf 	bl	80027ec <sbrk_aligned>
 800286e:	1c43      	adds	r3, r0, #1
 8002870:	4604      	mov	r4, r0
 8002872:	d158      	bne.n	8002926 <_malloc_r+0xf6>
 8002874:	f8d8 4000 	ldr.w	r4, [r8]
 8002878:	4627      	mov	r7, r4
 800287a:	2f00      	cmp	r7, #0
 800287c:	d143      	bne.n	8002906 <_malloc_r+0xd6>
 800287e:	2c00      	cmp	r4, #0
 8002880:	d04b      	beq.n	800291a <_malloc_r+0xea>
 8002882:	6823      	ldr	r3, [r4, #0]
 8002884:	4639      	mov	r1, r7
 8002886:	4630      	mov	r0, r6
 8002888:	eb04 0903 	add.w	r9, r4, r3
 800288c:	f000 f89a 	bl	80029c4 <_sbrk_r>
 8002890:	4581      	cmp	r9, r0
 8002892:	d142      	bne.n	800291a <_malloc_r+0xea>
 8002894:	6821      	ldr	r1, [r4, #0]
 8002896:	4630      	mov	r0, r6
 8002898:	1a6d      	subs	r5, r5, r1
 800289a:	4629      	mov	r1, r5
 800289c:	f7ff ffa6 	bl	80027ec <sbrk_aligned>
 80028a0:	3001      	adds	r0, #1
 80028a2:	d03a      	beq.n	800291a <_malloc_r+0xea>
 80028a4:	6823      	ldr	r3, [r4, #0]
 80028a6:	442b      	add	r3, r5
 80028a8:	6023      	str	r3, [r4, #0]
 80028aa:	f8d8 3000 	ldr.w	r3, [r8]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	bb62      	cbnz	r2, 800290c <_malloc_r+0xdc>
 80028b2:	f8c8 7000 	str.w	r7, [r8]
 80028b6:	e00f      	b.n	80028d8 <_malloc_r+0xa8>
 80028b8:	6822      	ldr	r2, [r4, #0]
 80028ba:	1b52      	subs	r2, r2, r5
 80028bc:	d420      	bmi.n	8002900 <_malloc_r+0xd0>
 80028be:	2a0b      	cmp	r2, #11
 80028c0:	d917      	bls.n	80028f2 <_malloc_r+0xc2>
 80028c2:	1961      	adds	r1, r4, r5
 80028c4:	42a3      	cmp	r3, r4
 80028c6:	6025      	str	r5, [r4, #0]
 80028c8:	bf18      	it	ne
 80028ca:	6059      	strne	r1, [r3, #4]
 80028cc:	6863      	ldr	r3, [r4, #4]
 80028ce:	bf08      	it	eq
 80028d0:	f8c8 1000 	streq.w	r1, [r8]
 80028d4:	5162      	str	r2, [r4, r5]
 80028d6:	604b      	str	r3, [r1, #4]
 80028d8:	4630      	mov	r0, r6
 80028da:	f000 f82f 	bl	800293c <__malloc_unlock>
 80028de:	f104 000b 	add.w	r0, r4, #11
 80028e2:	1d23      	adds	r3, r4, #4
 80028e4:	f020 0007 	bic.w	r0, r0, #7
 80028e8:	1ac2      	subs	r2, r0, r3
 80028ea:	bf1c      	itt	ne
 80028ec:	1a1b      	subne	r3, r3, r0
 80028ee:	50a3      	strne	r3, [r4, r2]
 80028f0:	e7af      	b.n	8002852 <_malloc_r+0x22>
 80028f2:	6862      	ldr	r2, [r4, #4]
 80028f4:	42a3      	cmp	r3, r4
 80028f6:	bf0c      	ite	eq
 80028f8:	f8c8 2000 	streq.w	r2, [r8]
 80028fc:	605a      	strne	r2, [r3, #4]
 80028fe:	e7eb      	b.n	80028d8 <_malloc_r+0xa8>
 8002900:	4623      	mov	r3, r4
 8002902:	6864      	ldr	r4, [r4, #4]
 8002904:	e7ae      	b.n	8002864 <_malloc_r+0x34>
 8002906:	463c      	mov	r4, r7
 8002908:	687f      	ldr	r7, [r7, #4]
 800290a:	e7b6      	b.n	800287a <_malloc_r+0x4a>
 800290c:	461a      	mov	r2, r3
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	42a3      	cmp	r3, r4
 8002912:	d1fb      	bne.n	800290c <_malloc_r+0xdc>
 8002914:	2300      	movs	r3, #0
 8002916:	6053      	str	r3, [r2, #4]
 8002918:	e7de      	b.n	80028d8 <_malloc_r+0xa8>
 800291a:	230c      	movs	r3, #12
 800291c:	4630      	mov	r0, r6
 800291e:	6033      	str	r3, [r6, #0]
 8002920:	f000 f80c 	bl	800293c <__malloc_unlock>
 8002924:	e794      	b.n	8002850 <_malloc_r+0x20>
 8002926:	6005      	str	r5, [r0, #0]
 8002928:	e7d6      	b.n	80028d8 <_malloc_r+0xa8>
 800292a:	bf00      	nop
 800292c:	2000012c 	.word	0x2000012c

08002930 <__malloc_lock>:
 8002930:	4801      	ldr	r0, [pc, #4]	@ (8002938 <__malloc_lock+0x8>)
 8002932:	f000 b881 	b.w	8002a38 <__retarget_lock_acquire_recursive>
 8002936:	bf00      	nop
 8002938:	2000026c 	.word	0x2000026c

0800293c <__malloc_unlock>:
 800293c:	4801      	ldr	r0, [pc, #4]	@ (8002944 <__malloc_unlock+0x8>)
 800293e:	f000 b87c 	b.w	8002a3a <__retarget_lock_release_recursive>
 8002942:	bf00      	nop
 8002944:	2000026c 	.word	0x2000026c

08002948 <realloc>:
 8002948:	4b02      	ldr	r3, [pc, #8]	@ (8002954 <realloc+0xc>)
 800294a:	460a      	mov	r2, r1
 800294c:	4601      	mov	r1, r0
 800294e:	6818      	ldr	r0, [r3, #0]
 8002950:	f000 b802 	b.w	8002958 <_realloc_r>
 8002954:	20000010 	.word	0x20000010

08002958 <_realloc_r>:
 8002958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800295c:	4680      	mov	r8, r0
 800295e:	4615      	mov	r5, r2
 8002960:	460c      	mov	r4, r1
 8002962:	b921      	cbnz	r1, 800296e <_realloc_r+0x16>
 8002964:	4611      	mov	r1, r2
 8002966:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800296a:	f7ff bf61 	b.w	8002830 <_malloc_r>
 800296e:	b92a      	cbnz	r2, 800297c <_realloc_r+0x24>
 8002970:	f000 f872 	bl	8002a58 <_free_r>
 8002974:	2400      	movs	r4, #0
 8002976:	4620      	mov	r0, r4
 8002978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800297c:	f000 f8b4 	bl	8002ae8 <_malloc_usable_size_r>
 8002980:	4285      	cmp	r5, r0
 8002982:	4606      	mov	r6, r0
 8002984:	d802      	bhi.n	800298c <_realloc_r+0x34>
 8002986:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800298a:	d8f4      	bhi.n	8002976 <_realloc_r+0x1e>
 800298c:	4629      	mov	r1, r5
 800298e:	4640      	mov	r0, r8
 8002990:	f7ff ff4e 	bl	8002830 <_malloc_r>
 8002994:	4607      	mov	r7, r0
 8002996:	2800      	cmp	r0, #0
 8002998:	d0ec      	beq.n	8002974 <_realloc_r+0x1c>
 800299a:	42b5      	cmp	r5, r6
 800299c:	462a      	mov	r2, r5
 800299e:	4621      	mov	r1, r4
 80029a0:	bf28      	it	cs
 80029a2:	4632      	movcs	r2, r6
 80029a4:	f000 f84a 	bl	8002a3c <memcpy>
 80029a8:	4621      	mov	r1, r4
 80029aa:	4640      	mov	r0, r8
 80029ac:	f000 f854 	bl	8002a58 <_free_r>
 80029b0:	463c      	mov	r4, r7
 80029b2:	e7e0      	b.n	8002976 <_realloc_r+0x1e>

080029b4 <memset>:
 80029b4:	4603      	mov	r3, r0
 80029b6:	4402      	add	r2, r0
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d100      	bne.n	80029be <memset+0xa>
 80029bc:	4770      	bx	lr
 80029be:	f803 1b01 	strb.w	r1, [r3], #1
 80029c2:	e7f9      	b.n	80029b8 <memset+0x4>

080029c4 <_sbrk_r>:
 80029c4:	b538      	push	{r3, r4, r5, lr}
 80029c6:	2300      	movs	r3, #0
 80029c8:	4d05      	ldr	r5, [pc, #20]	@ (80029e0 <_sbrk_r+0x1c>)
 80029ca:	4604      	mov	r4, r0
 80029cc:	4608      	mov	r0, r1
 80029ce:	602b      	str	r3, [r5, #0]
 80029d0:	f7fe f804 	bl	80009dc <_sbrk>
 80029d4:	1c43      	adds	r3, r0, #1
 80029d6:	d102      	bne.n	80029de <_sbrk_r+0x1a>
 80029d8:	682b      	ldr	r3, [r5, #0]
 80029da:	b103      	cbz	r3, 80029de <_sbrk_r+0x1a>
 80029dc:	6023      	str	r3, [r4, #0]
 80029de:	bd38      	pop	{r3, r4, r5, pc}
 80029e0:	20000268 	.word	0x20000268

080029e4 <__errno>:
 80029e4:	4b01      	ldr	r3, [pc, #4]	@ (80029ec <__errno+0x8>)
 80029e6:	6818      	ldr	r0, [r3, #0]
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	20000010 	.word	0x20000010

080029f0 <__libc_init_array>:
 80029f0:	b570      	push	{r4, r5, r6, lr}
 80029f2:	2600      	movs	r6, #0
 80029f4:	4d0c      	ldr	r5, [pc, #48]	@ (8002a28 <__libc_init_array+0x38>)
 80029f6:	4c0d      	ldr	r4, [pc, #52]	@ (8002a2c <__libc_init_array+0x3c>)
 80029f8:	1b64      	subs	r4, r4, r5
 80029fa:	10a4      	asrs	r4, r4, #2
 80029fc:	42a6      	cmp	r6, r4
 80029fe:	d109      	bne.n	8002a14 <__libc_init_array+0x24>
 8002a00:	f000 f87a 	bl	8002af8 <_init>
 8002a04:	2600      	movs	r6, #0
 8002a06:	4d0a      	ldr	r5, [pc, #40]	@ (8002a30 <__libc_init_array+0x40>)
 8002a08:	4c0a      	ldr	r4, [pc, #40]	@ (8002a34 <__libc_init_array+0x44>)
 8002a0a:	1b64      	subs	r4, r4, r5
 8002a0c:	10a4      	asrs	r4, r4, #2
 8002a0e:	42a6      	cmp	r6, r4
 8002a10:	d105      	bne.n	8002a1e <__libc_init_array+0x2e>
 8002a12:	bd70      	pop	{r4, r5, r6, pc}
 8002a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a18:	4798      	blx	r3
 8002a1a:	3601      	adds	r6, #1
 8002a1c:	e7ee      	b.n	80029fc <__libc_init_array+0xc>
 8002a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a22:	4798      	blx	r3
 8002a24:	3601      	adds	r6, #1
 8002a26:	e7f2      	b.n	8002a0e <__libc_init_array+0x1e>
 8002a28:	08002b3c 	.word	0x08002b3c
 8002a2c:	08002b3c 	.word	0x08002b3c
 8002a30:	08002b3c 	.word	0x08002b3c
 8002a34:	08002b40 	.word	0x08002b40

08002a38 <__retarget_lock_acquire_recursive>:
 8002a38:	4770      	bx	lr

08002a3a <__retarget_lock_release_recursive>:
 8002a3a:	4770      	bx	lr

08002a3c <memcpy>:
 8002a3c:	440a      	add	r2, r1
 8002a3e:	4291      	cmp	r1, r2
 8002a40:	f100 33ff 	add.w	r3, r0, #4294967295
 8002a44:	d100      	bne.n	8002a48 <memcpy+0xc>
 8002a46:	4770      	bx	lr
 8002a48:	b510      	push	{r4, lr}
 8002a4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a4e:	4291      	cmp	r1, r2
 8002a50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a54:	d1f9      	bne.n	8002a4a <memcpy+0xe>
 8002a56:	bd10      	pop	{r4, pc}

08002a58 <_free_r>:
 8002a58:	b538      	push	{r3, r4, r5, lr}
 8002a5a:	4605      	mov	r5, r0
 8002a5c:	2900      	cmp	r1, #0
 8002a5e:	d040      	beq.n	8002ae2 <_free_r+0x8a>
 8002a60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a64:	1f0c      	subs	r4, r1, #4
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	bfb8      	it	lt
 8002a6a:	18e4      	addlt	r4, r4, r3
 8002a6c:	f7ff ff60 	bl	8002930 <__malloc_lock>
 8002a70:	4a1c      	ldr	r2, [pc, #112]	@ (8002ae4 <_free_r+0x8c>)
 8002a72:	6813      	ldr	r3, [r2, #0]
 8002a74:	b933      	cbnz	r3, 8002a84 <_free_r+0x2c>
 8002a76:	6063      	str	r3, [r4, #4]
 8002a78:	6014      	str	r4, [r2, #0]
 8002a7a:	4628      	mov	r0, r5
 8002a7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a80:	f7ff bf5c 	b.w	800293c <__malloc_unlock>
 8002a84:	42a3      	cmp	r3, r4
 8002a86:	d908      	bls.n	8002a9a <_free_r+0x42>
 8002a88:	6820      	ldr	r0, [r4, #0]
 8002a8a:	1821      	adds	r1, r4, r0
 8002a8c:	428b      	cmp	r3, r1
 8002a8e:	bf01      	itttt	eq
 8002a90:	6819      	ldreq	r1, [r3, #0]
 8002a92:	685b      	ldreq	r3, [r3, #4]
 8002a94:	1809      	addeq	r1, r1, r0
 8002a96:	6021      	streq	r1, [r4, #0]
 8002a98:	e7ed      	b.n	8002a76 <_free_r+0x1e>
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	b10b      	cbz	r3, 8002aa4 <_free_r+0x4c>
 8002aa0:	42a3      	cmp	r3, r4
 8002aa2:	d9fa      	bls.n	8002a9a <_free_r+0x42>
 8002aa4:	6811      	ldr	r1, [r2, #0]
 8002aa6:	1850      	adds	r0, r2, r1
 8002aa8:	42a0      	cmp	r0, r4
 8002aaa:	d10b      	bne.n	8002ac4 <_free_r+0x6c>
 8002aac:	6820      	ldr	r0, [r4, #0]
 8002aae:	4401      	add	r1, r0
 8002ab0:	1850      	adds	r0, r2, r1
 8002ab2:	4283      	cmp	r3, r0
 8002ab4:	6011      	str	r1, [r2, #0]
 8002ab6:	d1e0      	bne.n	8002a7a <_free_r+0x22>
 8002ab8:	6818      	ldr	r0, [r3, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	4408      	add	r0, r1
 8002abe:	6010      	str	r0, [r2, #0]
 8002ac0:	6053      	str	r3, [r2, #4]
 8002ac2:	e7da      	b.n	8002a7a <_free_r+0x22>
 8002ac4:	d902      	bls.n	8002acc <_free_r+0x74>
 8002ac6:	230c      	movs	r3, #12
 8002ac8:	602b      	str	r3, [r5, #0]
 8002aca:	e7d6      	b.n	8002a7a <_free_r+0x22>
 8002acc:	6820      	ldr	r0, [r4, #0]
 8002ace:	1821      	adds	r1, r4, r0
 8002ad0:	428b      	cmp	r3, r1
 8002ad2:	bf01      	itttt	eq
 8002ad4:	6819      	ldreq	r1, [r3, #0]
 8002ad6:	685b      	ldreq	r3, [r3, #4]
 8002ad8:	1809      	addeq	r1, r1, r0
 8002ada:	6021      	streq	r1, [r4, #0]
 8002adc:	6063      	str	r3, [r4, #4]
 8002ade:	6054      	str	r4, [r2, #4]
 8002ae0:	e7cb      	b.n	8002a7a <_free_r+0x22>
 8002ae2:	bd38      	pop	{r3, r4, r5, pc}
 8002ae4:	2000012c 	.word	0x2000012c

08002ae8 <_malloc_usable_size_r>:
 8002ae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002aec:	1f18      	subs	r0, r3, #4
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	bfbc      	itt	lt
 8002af2:	580b      	ldrlt	r3, [r1, r0]
 8002af4:	18c0      	addlt	r0, r0, r3
 8002af6:	4770      	bx	lr

08002af8 <_init>:
 8002af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002afa:	bf00      	nop
 8002afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002afe:	bc08      	pop	{r3}
 8002b00:	469e      	mov	lr, r3
 8002b02:	4770      	bx	lr

08002b04 <_fini>:
 8002b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b06:	bf00      	nop
 8002b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b0a:	bc08      	pop	{r3}
 8002b0c:	469e      	mov	lr, r3
 8002b0e:	4770      	bx	lr
